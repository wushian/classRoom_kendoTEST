#pragma warning disable 1591
// <auto-generated>
//     This code was generated from a CodeSmith Generator template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace classRoomWebSite.Data
{
    /// <summary>
    /// The query extension class for QuestionAnser.
    /// </summary>
    public static partial class QuestionAnserExtensions
    {
        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static classRoomWebSite.Data.QuestionAnser GetByKey(this IQueryable<classRoomWebSite.Data.QuestionAnser> queryable, System.Guid identification)
        {
            return queryable.FirstOrDefault(q => q.Identification == identification);
        }
        /// <summary>
        /// Gets an instance by using a unique index.
        /// </summary>
        /// <returns>An instance of the entity or null if not found.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static classRoomWebSite.Data.QuestionAnser GetByIdentification(this IQueryable<classRoomWebSite.Data.QuestionAnser> queryable, System.Guid identification)
        {
            var entity = queryable as System.Data.Objects.ObjectSet<classRoomWebSite.Data.QuestionAnser>;
            if (entity != null && !entity.Context.ContextOptions.LazyLoadingEnabled)
                return Query.GetByIdentification.Invoke((classRoomWebSite.Data.classRoomWebSiteDataContext)entity.Context, identification);

            return queryable.FirstOrDefault(q => q.Identification == identification);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.QuestionAnser.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.QuestionAnser> ByIdentification(this IQueryable<classRoomWebSite.Data.QuestionAnser> queryable, System.Guid identification)
        {
            return queryable.Where(q => q.Identification == identification);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.QuestionAnser.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.QuestionAnser> ByIdentification(this IQueryable<classRoomWebSite.Data.QuestionAnser> queryable, ComparisonOperator comparisonOperator, System.Guid identification)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                case ComparisonOperator.GreaterThanOrEquals:
                case ComparisonOperator.LessThan:
                case ComparisonOperator.LessThanOrEquals:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support System.Guid type.", "comparisonOperator");
                case ComparisonOperator.NotEquals:
                    return queryable.Where(q => q.Identification != identification);
                default:
                    return queryable.Where(q => q.Identification == identification);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.QuestionAnser.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.QuestionAnser> ByIdentification(this IQueryable<classRoomWebSite.Data.QuestionAnser> queryable, System.Guid identification, params System.Guid[] additionalValues)
        {
            var identificationList = new List<System.Guid> { identification };

            if (additionalValues != null)
                identificationList.AddRange(additionalValues);

            if (identificationList.Count == 1)
                return queryable.ByIdentification(identificationList[0]);

            return queryable.ByIdentification(identificationList);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.QuestionAnser.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.QuestionAnser> ByIdentification(this IQueryable<classRoomWebSite.Data.QuestionAnser> queryable, IEnumerable<System.Guid> values)
        {
            return queryable.Where(q => values.Contains(q.Identification));
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.QuestionAnser.Cat1"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="cat1">Cat1 to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.QuestionAnser> ByCat1(this IQueryable<classRoomWebSite.Data.QuestionAnser> queryable, System.Int32? cat1)
        {
            // support nulls
            return cat1 == null 
                ? queryable.Where(q => q.Cat1 == null) 
                : queryable.Where(q => q.Cat1 == cat1);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.QuestionAnser.Cat1"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="cat1">Cat1 to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.QuestionAnser> ByCat1(this IQueryable<classRoomWebSite.Data.QuestionAnser> queryable, ComparisonOperator comparisonOperator, System.Int32? cat1)
        {
            if (cat1 == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("cat1", "Parameter 'cat1' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(q => q.Cat1 > cat1);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(q => q.Cat1 >= cat1);
                case ComparisonOperator.LessThan:
                    return queryable.Where(q => q.Cat1 < cat1);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(q => q.Cat1 <= cat1);
                case ComparisonOperator.NotEquals:
                    return cat1 == null 
                        ? queryable.Where(q => q.Cat1 != null) 
                        : queryable.Where(q => q.Cat1 != cat1);
                default:
                    return cat1 == null 
                        ? queryable.Where(q => q.Cat1 == null) 
                        : queryable.Where(q => q.Cat1 == cat1);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.QuestionAnser.Cat1"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="cat1">Cat1 to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.QuestionAnser> ByCat1(this IQueryable<classRoomWebSite.Data.QuestionAnser> queryable, System.Int32? cat1, params System.Int32?[] additionalValues)
        {
            var cat1List = new List<System.Int32?> { cat1 };

            if (additionalValues != null)
                cat1List.AddRange(additionalValues);
            else
                cat1List.Add(null);

            if (cat1List.Count == 1)
                return queryable.ByCat1(cat1List[0]);

            return queryable.ByCat1(cat1List);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.QuestionAnser.Cat1"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.QuestionAnser> ByCat1(this IQueryable<classRoomWebSite.Data.QuestionAnser> queryable, IEnumerable<System.Int32?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<classRoomWebSite.Data.QuestionAnser, bool>("Cat1", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.QuestionAnser.Cat2"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="cat2">Cat2 to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.QuestionAnser> ByCat2(this IQueryable<classRoomWebSite.Data.QuestionAnser> queryable, System.Int32? cat2)
        {
            // support nulls
            return cat2 == null 
                ? queryable.Where(q => q.Cat2 == null) 
                : queryable.Where(q => q.Cat2 == cat2);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.QuestionAnser.Cat2"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="cat2">Cat2 to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.QuestionAnser> ByCat2(this IQueryable<classRoomWebSite.Data.QuestionAnser> queryable, ComparisonOperator comparisonOperator, System.Int32? cat2)
        {
            if (cat2 == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("cat2", "Parameter 'cat2' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(q => q.Cat2 > cat2);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(q => q.Cat2 >= cat2);
                case ComparisonOperator.LessThan:
                    return queryable.Where(q => q.Cat2 < cat2);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(q => q.Cat2 <= cat2);
                case ComparisonOperator.NotEquals:
                    return cat2 == null 
                        ? queryable.Where(q => q.Cat2 != null) 
                        : queryable.Where(q => q.Cat2 != cat2);
                default:
                    return cat2 == null 
                        ? queryable.Where(q => q.Cat2 == null) 
                        : queryable.Where(q => q.Cat2 == cat2);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.QuestionAnser.Cat2"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="cat2">Cat2 to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.QuestionAnser> ByCat2(this IQueryable<classRoomWebSite.Data.QuestionAnser> queryable, System.Int32? cat2, params System.Int32?[] additionalValues)
        {
            var cat2List = new List<System.Int32?> { cat2 };

            if (additionalValues != null)
                cat2List.AddRange(additionalValues);
            else
                cat2List.Add(null);

            if (cat2List.Count == 1)
                return queryable.ByCat2(cat2List[0]);

            return queryable.ByCat2(cat2List);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.QuestionAnser.Cat2"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.QuestionAnser> ByCat2(this IQueryable<classRoomWebSite.Data.QuestionAnser> queryable, IEnumerable<System.Int32?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<classRoomWebSite.Data.QuestionAnser, bool>("Cat2", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.QuestionAnser.Pic1"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="pic1">Pic1 to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.QuestionAnser> ByPic1(this IQueryable<classRoomWebSite.Data.QuestionAnser> queryable, System.String pic1)
        {
            // support nulls
            return pic1 == null 
                ? queryable.Where(q => q.Pic1 == null) 
                : queryable.Where(q => q.Pic1 == pic1);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.QuestionAnser.Pic1"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="pic1">Pic1 to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.QuestionAnser> ByPic1(this IQueryable<classRoomWebSite.Data.QuestionAnser> queryable, ContainmentOperator containmentOperator, System.String pic1)
        {
            if (pic1 == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("pic1", "Parameter 'pic1' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(q => q.Pic1.Contains(pic1));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(q => q.Pic1.StartsWith(pic1));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(q => q.Pic1.EndsWith(pic1));
                case ContainmentOperator.NotContains:
                    return queryable.Where(q => q.Pic1.Contains(pic1) == false);
                case ContainmentOperator.NotEquals:
                    return pic1 == null 
                        ? queryable.Where(q => q.Pic1 != null) 
                        : queryable.Where(q => q.Pic1 != pic1);
                default:
                    return pic1 == null 
                        ? queryable.Where(q => q.Pic1 == null) 
                        : queryable.Where(q => q.Pic1 == pic1);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.QuestionAnser.Pic1"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="pic1">Pic1 to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.QuestionAnser> ByPic1(this IQueryable<classRoomWebSite.Data.QuestionAnser> queryable, System.String pic1, params System.String[] additionalValues)
        {
            var pic1List = new List<System.String> { pic1 };

            if (additionalValues != null)
                pic1List.AddRange(additionalValues);
            else
                pic1List.Add(null);

            if (pic1List.Count == 1)
                return queryable.ByPic1(pic1List[0]);

            return queryable.ByPic1(pic1List);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.QuestionAnser.Pic1"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.QuestionAnser> ByPic1(this IQueryable<classRoomWebSite.Data.QuestionAnser> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<classRoomWebSite.Data.QuestionAnser, bool>("Pic1", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.QuestionAnser.Pic2"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="pic2">Pic2 to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.QuestionAnser> ByPic2(this IQueryable<classRoomWebSite.Data.QuestionAnser> queryable, System.String pic2)
        {
            // support nulls
            return pic2 == null 
                ? queryable.Where(q => q.Pic2 == null) 
                : queryable.Where(q => q.Pic2 == pic2);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.QuestionAnser.Pic2"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="pic2">Pic2 to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.QuestionAnser> ByPic2(this IQueryable<classRoomWebSite.Data.QuestionAnser> queryable, ContainmentOperator containmentOperator, System.String pic2)
        {
            if (pic2 == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("pic2", "Parameter 'pic2' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(q => q.Pic2.Contains(pic2));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(q => q.Pic2.StartsWith(pic2));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(q => q.Pic2.EndsWith(pic2));
                case ContainmentOperator.NotContains:
                    return queryable.Where(q => q.Pic2.Contains(pic2) == false);
                case ContainmentOperator.NotEquals:
                    return pic2 == null 
                        ? queryable.Where(q => q.Pic2 != null) 
                        : queryable.Where(q => q.Pic2 != pic2);
                default:
                    return pic2 == null 
                        ? queryable.Where(q => q.Pic2 == null) 
                        : queryable.Where(q => q.Pic2 == pic2);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.QuestionAnser.Pic2"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="pic2">Pic2 to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.QuestionAnser> ByPic2(this IQueryable<classRoomWebSite.Data.QuestionAnser> queryable, System.String pic2, params System.String[] additionalValues)
        {
            var pic2List = new List<System.String> { pic2 };

            if (additionalValues != null)
                pic2List.AddRange(additionalValues);
            else
                pic2List.Add(null);

            if (pic2List.Count == 1)
                return queryable.ByPic2(pic2List[0]);

            return queryable.ByPic2(pic2List);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.QuestionAnser.Pic2"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.QuestionAnser> ByPic2(this IQueryable<classRoomWebSite.Data.QuestionAnser> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<classRoomWebSite.Data.QuestionAnser, bool>("Pic2", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.QuestionAnser.Describe"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="describe">Describe to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.QuestionAnser> ByDescribe(this IQueryable<classRoomWebSite.Data.QuestionAnser> queryable, System.String describe)
        {
            // support nulls
            return describe == null 
                ? queryable.Where(q => q.Describe == null) 
                : queryable.Where(q => q.Describe == describe);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.QuestionAnser.Describe"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="describe">Describe to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.QuestionAnser> ByDescribe(this IQueryable<classRoomWebSite.Data.QuestionAnser> queryable, ContainmentOperator containmentOperator, System.String describe)
        {
            if (describe == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("describe", "Parameter 'describe' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(q => q.Describe.Contains(describe));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(q => q.Describe.StartsWith(describe));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(q => q.Describe.EndsWith(describe));
                case ContainmentOperator.NotContains:
                    return queryable.Where(q => q.Describe.Contains(describe) == false);
                case ContainmentOperator.NotEquals:
                    return describe == null 
                        ? queryable.Where(q => q.Describe != null) 
                        : queryable.Where(q => q.Describe != describe);
                default:
                    return describe == null 
                        ? queryable.Where(q => q.Describe == null) 
                        : queryable.Where(q => q.Describe == describe);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.QuestionAnser.Describe"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="describe">Describe to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.QuestionAnser> ByDescribe(this IQueryable<classRoomWebSite.Data.QuestionAnser> queryable, System.String describe, params System.String[] additionalValues)
        {
            var describeList = new List<System.String> { describe };

            if (additionalValues != null)
                describeList.AddRange(additionalValues);
            else
                describeList.Add(null);

            if (describeList.Count == 1)
                return queryable.ByDescribe(describeList[0]);

            return queryable.ByDescribe(describeList);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.QuestionAnser.Describe"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.QuestionAnser> ByDescribe(this IQueryable<classRoomWebSite.Data.QuestionAnser> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<classRoomWebSite.Data.QuestionAnser, bool>("Describe", values);
            return queryable.Where(expression);
        }

        #region Query
        /// <summary>
        /// A private class for lazy loading static compiled queries.
        /// </summary>
        private static partial class Query
        {
            [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
            internal static readonly Func<classRoomWebSite.Data.classRoomWebSiteDataContext, System.Guid, classRoomWebSite.Data.QuestionAnser> GetByKey =
                System.Data.Objects.CompiledQuery.Compile(
                    (classRoomWebSite.Data.classRoomWebSiteDataContext db, System.Guid identification) =>
                        db.QuestionAnser.FirstOrDefault(q => q.Identification == identification));

            [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
            internal static readonly Func<classRoomWebSite.Data.classRoomWebSiteDataContext, System.Guid, classRoomWebSite.Data.QuestionAnser> GetByIdentification =
                System.Data.Objects.CompiledQuery.Compile(
                    (classRoomWebSite.Data.classRoomWebSiteDataContext db, System.Guid identification) =>
                        db.QuestionAnser.FirstOrDefault(q => q.Identification == identification));

        }
        #endregion
    }
}
#pragma warning restore 1591
