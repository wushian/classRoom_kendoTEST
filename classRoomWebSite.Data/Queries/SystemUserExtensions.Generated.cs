#pragma warning disable 1591
// <auto-generated>
//     This code was generated from a CodeSmith Generator template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace classRoomWebSite.Data
{
    /// <summary>
    /// The query extension class for SystemUser.
    /// </summary>
    public static partial class SystemUserExtensions
    {
        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static classRoomWebSite.Data.SystemUser GetByKey(this IQueryable<classRoomWebSite.Data.SystemUser> queryable, System.Guid identification)
        {
            return queryable.FirstOrDefault(s => s.Identification == identification);
        }
        /// <summary>
        /// Gets an instance by using a unique index.
        /// </summary>
        /// <returns>An instance of the entity or null if not found.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static classRoomWebSite.Data.SystemUser GetByIdentification(this IQueryable<classRoomWebSite.Data.SystemUser> queryable, System.Guid identification)
        {
            var entity = queryable as System.Data.Objects.ObjectSet<classRoomWebSite.Data.SystemUser>;
            if (entity != null && !entity.Context.ContextOptions.LazyLoadingEnabled)
                return Query.GetByIdentification.Invoke((classRoomWebSite.Data.classRoomWebSiteDataContext)entity.Context, identification);

            return queryable.FirstOrDefault(s => s.Identification == identification);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.SystemUser.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.SystemUser> ByIdentification(this IQueryable<classRoomWebSite.Data.SystemUser> queryable, System.Guid identification)
        {
            return queryable.Where(s => s.Identification == identification);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.SystemUser.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.SystemUser> ByIdentification(this IQueryable<classRoomWebSite.Data.SystemUser> queryable, ComparisonOperator comparisonOperator, System.Guid identification)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                case ComparisonOperator.GreaterThanOrEquals:
                case ComparisonOperator.LessThan:
                case ComparisonOperator.LessThanOrEquals:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support System.Guid type.", "comparisonOperator");
                case ComparisonOperator.NotEquals:
                    return queryable.Where(s => s.Identification != identification);
                default:
                    return queryable.Where(s => s.Identification == identification);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.SystemUser.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.SystemUser> ByIdentification(this IQueryable<classRoomWebSite.Data.SystemUser> queryable, System.Guid identification, params System.Guid[] additionalValues)
        {
            var identificationList = new List<System.Guid> { identification };

            if (additionalValues != null)
                identificationList.AddRange(additionalValues);

            if (identificationList.Count == 1)
                return queryable.ByIdentification(identificationList[0]);

            return queryable.ByIdentification(identificationList);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.SystemUser.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.SystemUser> ByIdentification(this IQueryable<classRoomWebSite.Data.SystemUser> queryable, IEnumerable<System.Guid> values)
        {
            return queryable.Where(s => values.Contains(s.Identification));
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.SystemUser.Name"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="name">Name to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.SystemUser> ByName(this IQueryable<classRoomWebSite.Data.SystemUser> queryable, System.String name)
        {
            return queryable.Where(s => s.Name == name);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.SystemUser.Name"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="name">Name to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.SystemUser> ByName(this IQueryable<classRoomWebSite.Data.SystemUser> queryable, ContainmentOperator containmentOperator, System.String name)
        {
            if (name == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("name", "Parameter 'name' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(s => s.Name.Contains(name));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(s => s.Name.StartsWith(name));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(s => s.Name.EndsWith(name));
                case ContainmentOperator.NotContains:
                    return queryable.Where(s => s.Name.Contains(name) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(s => s.Name != name);
                default:
                    return queryable.Where(s => s.Name == name);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.SystemUser.Name"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="name">Name to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.SystemUser> ByName(this IQueryable<classRoomWebSite.Data.SystemUser> queryable, System.String name, params System.String[] additionalValues)
        {
            var nameList = new List<System.String> { name };

            if (additionalValues != null)
                nameList.AddRange(additionalValues);

            if (nameList.Count == 1)
                return queryable.ByName(nameList[0]);

            return queryable.ByName(nameList);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.SystemUser.Name"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.SystemUser> ByName(this IQueryable<classRoomWebSite.Data.SystemUser> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(s => values.Contains(s.Name));
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.SystemUser.Account"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="account">Account to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.SystemUser> ByAccount(this IQueryable<classRoomWebSite.Data.SystemUser> queryable, System.String account)
        {
            return queryable.Where(s => s.Account == account);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.SystemUser.Account"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="account">Account to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.SystemUser> ByAccount(this IQueryable<classRoomWebSite.Data.SystemUser> queryable, ContainmentOperator containmentOperator, System.String account)
        {
            if (account == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("account", "Parameter 'account' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(s => s.Account.Contains(account));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(s => s.Account.StartsWith(account));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(s => s.Account.EndsWith(account));
                case ContainmentOperator.NotContains:
                    return queryable.Where(s => s.Account.Contains(account) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(s => s.Account != account);
                default:
                    return queryable.Where(s => s.Account == account);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.SystemUser.Account"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="account">Account to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.SystemUser> ByAccount(this IQueryable<classRoomWebSite.Data.SystemUser> queryable, System.String account, params System.String[] additionalValues)
        {
            var accountList = new List<System.String> { account };

            if (additionalValues != null)
                accountList.AddRange(additionalValues);

            if (accountList.Count == 1)
                return queryable.ByAccount(accountList[0]);

            return queryable.ByAccount(accountList);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.SystemUser.Account"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.SystemUser> ByAccount(this IQueryable<classRoomWebSite.Data.SystemUser> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(s => values.Contains(s.Account));
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.SystemUser.Password"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="password">Password to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.SystemUser> ByPassword(this IQueryable<classRoomWebSite.Data.SystemUser> queryable, System.String password)
        {
            return queryable.Where(s => s.Password == password);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.SystemUser.Password"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="password">Password to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.SystemUser> ByPassword(this IQueryable<classRoomWebSite.Data.SystemUser> queryable, ContainmentOperator containmentOperator, System.String password)
        {
            if (password == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("password", "Parameter 'password' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(s => s.Password.Contains(password));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(s => s.Password.StartsWith(password));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(s => s.Password.EndsWith(password));
                case ContainmentOperator.NotContains:
                    return queryable.Where(s => s.Password.Contains(password) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(s => s.Password != password);
                default:
                    return queryable.Where(s => s.Password == password);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.SystemUser.Password"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="password">Password to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.SystemUser> ByPassword(this IQueryable<classRoomWebSite.Data.SystemUser> queryable, System.String password, params System.String[] additionalValues)
        {
            var passwordList = new List<System.String> { password };

            if (additionalValues != null)
                passwordList.AddRange(additionalValues);

            if (passwordList.Count == 1)
                return queryable.ByPassword(passwordList[0]);

            return queryable.ByPassword(passwordList);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.SystemUser.Password"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.SystemUser> ByPassword(this IQueryable<classRoomWebSite.Data.SystemUser> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(s => values.Contains(s.Password));
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.SystemUser.Salt"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="salt">Salt to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.SystemUser> BySalt(this IQueryable<classRoomWebSite.Data.SystemUser> queryable, System.String salt)
        {
            return queryable.Where(s => s.Salt == salt);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.SystemUser.Salt"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="salt">Salt to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.SystemUser> BySalt(this IQueryable<classRoomWebSite.Data.SystemUser> queryable, ContainmentOperator containmentOperator, System.String salt)
        {
            if (salt == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("salt", "Parameter 'salt' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(s => s.Salt.Contains(salt));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(s => s.Salt.StartsWith(salt));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(s => s.Salt.EndsWith(salt));
                case ContainmentOperator.NotContains:
                    return queryable.Where(s => s.Salt.Contains(salt) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(s => s.Salt != salt);
                default:
                    return queryable.Where(s => s.Salt == salt);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.SystemUser.Salt"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="salt">Salt to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.SystemUser> BySalt(this IQueryable<classRoomWebSite.Data.SystemUser> queryable, System.String salt, params System.String[] additionalValues)
        {
            var saltList = new List<System.String> { salt };

            if (additionalValues != null)
                saltList.AddRange(additionalValues);

            if (saltList.Count == 1)
                return queryable.BySalt(saltList[0]);

            return queryable.BySalt(saltList);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.SystemUser.Salt"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.SystemUser> BySalt(this IQueryable<classRoomWebSite.Data.SystemUser> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(s => values.Contains(s.Salt));
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.SystemUser.Email"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="email">Email to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.SystemUser> ByEmail(this IQueryable<classRoomWebSite.Data.SystemUser> queryable, System.String email)
        {
            return queryable.Where(s => s.Email == email);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.SystemUser.Email"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="email">Email to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.SystemUser> ByEmail(this IQueryable<classRoomWebSite.Data.SystemUser> queryable, ContainmentOperator containmentOperator, System.String email)
        {
            if (email == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("email", "Parameter 'email' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(s => s.Email.Contains(email));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(s => s.Email.StartsWith(email));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(s => s.Email.EndsWith(email));
                case ContainmentOperator.NotContains:
                    return queryable.Where(s => s.Email.Contains(email) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(s => s.Email != email);
                default:
                    return queryable.Where(s => s.Email == email);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.SystemUser.Email"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="email">Email to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.SystemUser> ByEmail(this IQueryable<classRoomWebSite.Data.SystemUser> queryable, System.String email, params System.String[] additionalValues)
        {
            var emailList = new List<System.String> { email };

            if (additionalValues != null)
                emailList.AddRange(additionalValues);

            if (emailList.Count == 1)
                return queryable.ByEmail(emailList[0]);

            return queryable.ByEmail(emailList);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.SystemUser.Email"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.SystemUser> ByEmail(this IQueryable<classRoomWebSite.Data.SystemUser> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(s => values.Contains(s.Email));
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.SystemUser.CreateDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="createDate">CreateDate to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.SystemUser> ByCreateDate(this IQueryable<classRoomWebSite.Data.SystemUser> queryable, System.DateTime createDate)
        {
            return queryable.Where(s => s.CreateDate == createDate);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.SystemUser.CreateDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="createDate">CreateDate to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.SystemUser> ByCreateDate(this IQueryable<classRoomWebSite.Data.SystemUser> queryable, ComparisonOperator comparisonOperator, System.DateTime createDate)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(s => s.CreateDate > createDate);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(s => s.CreateDate >= createDate);
                case ComparisonOperator.LessThan:
                    return queryable.Where(s => s.CreateDate < createDate);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(s => s.CreateDate <= createDate);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(s => s.CreateDate != createDate);
                default:
                    return queryable.Where(s => s.CreateDate == createDate);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.SystemUser.CreateDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="createDate">CreateDate to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.SystemUser> ByCreateDate(this IQueryable<classRoomWebSite.Data.SystemUser> queryable, System.DateTime createDate, params System.DateTime[] additionalValues)
        {
            var createDateList = new List<System.DateTime> { createDate };

            if (additionalValues != null)
                createDateList.AddRange(additionalValues);

            if (createDateList.Count == 1)
                return queryable.ByCreateDate(createDateList[0]);

            return queryable.ByCreateDate(createDateList);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.SystemUser.CreateDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.SystemUser> ByCreateDate(this IQueryable<classRoomWebSite.Data.SystemUser> queryable, IEnumerable<System.DateTime> values)
        {
            return queryable.Where(s => values.Contains(s.CreateDate));
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.SystemUser.UpdateDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="updateDate">UpdateDate to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.SystemUser> ByUpdateDate(this IQueryable<classRoomWebSite.Data.SystemUser> queryable, System.DateTime updateDate)
        {
            return queryable.Where(s => s.UpdateDate == updateDate);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.SystemUser.UpdateDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="updateDate">UpdateDate to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.SystemUser> ByUpdateDate(this IQueryable<classRoomWebSite.Data.SystemUser> queryable, ComparisonOperator comparisonOperator, System.DateTime updateDate)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(s => s.UpdateDate > updateDate);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(s => s.UpdateDate >= updateDate);
                case ComparisonOperator.LessThan:
                    return queryable.Where(s => s.UpdateDate < updateDate);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(s => s.UpdateDate <= updateDate);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(s => s.UpdateDate != updateDate);
                default:
                    return queryable.Where(s => s.UpdateDate == updateDate);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.SystemUser.UpdateDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="updateDate">UpdateDate to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.SystemUser> ByUpdateDate(this IQueryable<classRoomWebSite.Data.SystemUser> queryable, System.DateTime updateDate, params System.DateTime[] additionalValues)
        {
            var updateDateList = new List<System.DateTime> { updateDate };

            if (additionalValues != null)
                updateDateList.AddRange(additionalValues);

            if (updateDateList.Count == 1)
                return queryable.ByUpdateDate(updateDateList[0]);

            return queryable.ByUpdateDate(updateDateList);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.SystemUser.UpdateDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.SystemUser> ByUpdateDate(this IQueryable<classRoomWebSite.Data.SystemUser> queryable, IEnumerable<System.DateTime> values)
        {
            return queryable.Where(s => values.Contains(s.UpdateDate));
        }

        #region Query
        /// <summary>
        /// A private class for lazy loading static compiled queries.
        /// </summary>
        private static partial class Query
        {
            [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
            internal static readonly Func<classRoomWebSite.Data.classRoomWebSiteDataContext, System.Guid, classRoomWebSite.Data.SystemUser> GetByKey =
                System.Data.Objects.CompiledQuery.Compile(
                    (classRoomWebSite.Data.classRoomWebSiteDataContext db, System.Guid identification) =>
                        db.SystemUser.FirstOrDefault(s => s.Identification == identification));

            [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
            internal static readonly Func<classRoomWebSite.Data.classRoomWebSiteDataContext, System.Guid, classRoomWebSite.Data.SystemUser> GetByIdentification =
                System.Data.Objects.CompiledQuery.Compile(
                    (classRoomWebSite.Data.classRoomWebSiteDataContext db, System.Guid identification) =>
                        db.SystemUser.FirstOrDefault(s => s.Identification == identification));

        }
        #endregion
    }
}
#pragma warning restore 1591
