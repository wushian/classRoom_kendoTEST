#pragma warning disable 1591
// <auto-generated>
//     This code was generated from a CodeSmith Generator template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace classRoomWebSite.Data
{
    /// <summary>
    /// The query extension class for CalendarDetail.
    /// </summary>
    public static partial class CalendarDetailExtensions
    {
        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static classRoomWebSite.Data.CalendarDetail GetByKey(this IQueryable<classRoomWebSite.Data.CalendarDetail> queryable, System.Guid identification)
        {
            return queryable.FirstOrDefault(c => c.Identification == identification);
        }
        /// <summary>
        /// Gets an instance by using a unique index.
        /// </summary>
        /// <returns>An instance of the entity or null if not found.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static classRoomWebSite.Data.CalendarDetail GetByIdentification(this IQueryable<classRoomWebSite.Data.CalendarDetail> queryable, System.Guid identification)
        {
            var entity = queryable as System.Data.Objects.ObjectSet<classRoomWebSite.Data.CalendarDetail>;
            if (entity != null && !entity.Context.ContextOptions.LazyLoadingEnabled)
                return Query.GetByIdentification.Invoke((classRoomWebSite.Data.classRoomWebSiteDataContext)entity.Context, identification);

            return queryable.FirstOrDefault(c => c.Identification == identification);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.CalendarDetail.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.CalendarDetail> ByIdentification(this IQueryable<classRoomWebSite.Data.CalendarDetail> queryable, System.Guid identification)
        {
            return queryable.Where(c => c.Identification == identification);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.CalendarDetail.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.CalendarDetail> ByIdentification(this IQueryable<classRoomWebSite.Data.CalendarDetail> queryable, ComparisonOperator comparisonOperator, System.Guid identification)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                case ComparisonOperator.GreaterThanOrEquals:
                case ComparisonOperator.LessThan:
                case ComparisonOperator.LessThanOrEquals:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support System.Guid type.", "comparisonOperator");
                case ComparisonOperator.NotEquals:
                    return queryable.Where(c => c.Identification != identification);
                default:
                    return queryable.Where(c => c.Identification == identification);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.CalendarDetail.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.CalendarDetail> ByIdentification(this IQueryable<classRoomWebSite.Data.CalendarDetail> queryable, System.Guid identification, params System.Guid[] additionalValues)
        {
            var identificationList = new List<System.Guid> { identification };

            if (additionalValues != null)
                identificationList.AddRange(additionalValues);

            if (identificationList.Count == 1)
                return queryable.ByIdentification(identificationList[0]);

            return queryable.ByIdentification(identificationList);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.CalendarDetail.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.CalendarDetail> ByIdentification(this IQueryable<classRoomWebSite.Data.CalendarDetail> queryable, IEnumerable<System.Guid> values)
        {
            return queryable.Where(c => values.Contains(c.Identification));
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.CalendarDetail.Subject"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="subject">Subject to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.CalendarDetail> BySubject(this IQueryable<classRoomWebSite.Data.CalendarDetail> queryable, System.String subject)
        {
            return queryable.Where(c => c.Subject == subject);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.CalendarDetail.Subject"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="subject">Subject to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.CalendarDetail> BySubject(this IQueryable<classRoomWebSite.Data.CalendarDetail> queryable, ContainmentOperator containmentOperator, System.String subject)
        {
            if (subject == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("subject", "Parameter 'subject' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(c => c.Subject.Contains(subject));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(c => c.Subject.StartsWith(subject));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(c => c.Subject.EndsWith(subject));
                case ContainmentOperator.NotContains:
                    return queryable.Where(c => c.Subject.Contains(subject) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(c => c.Subject != subject);
                default:
                    return queryable.Where(c => c.Subject == subject);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.CalendarDetail.Subject"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="subject">Subject to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.CalendarDetail> BySubject(this IQueryable<classRoomWebSite.Data.CalendarDetail> queryable, System.String subject, params System.String[] additionalValues)
        {
            var subjectList = new List<System.String> { subject };

            if (additionalValues != null)
                subjectList.AddRange(additionalValues);

            if (subjectList.Count == 1)
                return queryable.BySubject(subjectList[0]);

            return queryable.BySubject(subjectList);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.CalendarDetail.Subject"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.CalendarDetail> BySubject(this IQueryable<classRoomWebSite.Data.CalendarDetail> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(c => values.Contains(c.Subject));
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.CalendarDetail.StartDateTime"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="startDateTime">StartDateTime to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.CalendarDetail> ByStartDateTime(this IQueryable<classRoomWebSite.Data.CalendarDetail> queryable, System.DateTime? startDateTime)
        {
            // support nulls
            return startDateTime == null 
                ? queryable.Where(c => c.StartDateTime == null) 
                : queryable.Where(c => c.StartDateTime == startDateTime);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.CalendarDetail.StartDateTime"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="startDateTime">StartDateTime to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.CalendarDetail> ByStartDateTime(this IQueryable<classRoomWebSite.Data.CalendarDetail> queryable, ComparisonOperator comparisonOperator, System.DateTime? startDateTime)
        {
            if (startDateTime == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("startDateTime", "Parameter 'startDateTime' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(c => c.StartDateTime > startDateTime);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(c => c.StartDateTime >= startDateTime);
                case ComparisonOperator.LessThan:
                    return queryable.Where(c => c.StartDateTime < startDateTime);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(c => c.StartDateTime <= startDateTime);
                case ComparisonOperator.NotEquals:
                    return startDateTime == null 
                        ? queryable.Where(c => c.StartDateTime != null) 
                        : queryable.Where(c => c.StartDateTime != startDateTime);
                default:
                    return startDateTime == null 
                        ? queryable.Where(c => c.StartDateTime == null) 
                        : queryable.Where(c => c.StartDateTime == startDateTime);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.CalendarDetail.StartDateTime"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="startDateTime">StartDateTime to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.CalendarDetail> ByStartDateTime(this IQueryable<classRoomWebSite.Data.CalendarDetail> queryable, System.DateTime? startDateTime, params System.DateTime?[] additionalValues)
        {
            var startDateTimeList = new List<System.DateTime?> { startDateTime };

            if (additionalValues != null)
                startDateTimeList.AddRange(additionalValues);
            else
                startDateTimeList.Add(null);

            if (startDateTimeList.Count == 1)
                return queryable.ByStartDateTime(startDateTimeList[0]);

            return queryable.ByStartDateTime(startDateTimeList);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.CalendarDetail.StartDateTime"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.CalendarDetail> ByStartDateTime(this IQueryable<classRoomWebSite.Data.CalendarDetail> queryable, IEnumerable<System.DateTime?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<classRoomWebSite.Data.CalendarDetail, bool>("StartDateTime", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.CalendarDetail.EndDateTime"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="endDateTime">EndDateTime to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.CalendarDetail> ByEndDateTime(this IQueryable<classRoomWebSite.Data.CalendarDetail> queryable, System.DateTime? endDateTime)
        {
            // support nulls
            return endDateTime == null 
                ? queryable.Where(c => c.EndDateTime == null) 
                : queryable.Where(c => c.EndDateTime == endDateTime);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.CalendarDetail.EndDateTime"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="endDateTime">EndDateTime to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.CalendarDetail> ByEndDateTime(this IQueryable<classRoomWebSite.Data.CalendarDetail> queryable, ComparisonOperator comparisonOperator, System.DateTime? endDateTime)
        {
            if (endDateTime == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("endDateTime", "Parameter 'endDateTime' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(c => c.EndDateTime > endDateTime);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(c => c.EndDateTime >= endDateTime);
                case ComparisonOperator.LessThan:
                    return queryable.Where(c => c.EndDateTime < endDateTime);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(c => c.EndDateTime <= endDateTime);
                case ComparisonOperator.NotEquals:
                    return endDateTime == null 
                        ? queryable.Where(c => c.EndDateTime != null) 
                        : queryable.Where(c => c.EndDateTime != endDateTime);
                default:
                    return endDateTime == null 
                        ? queryable.Where(c => c.EndDateTime == null) 
                        : queryable.Where(c => c.EndDateTime == endDateTime);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.CalendarDetail.EndDateTime"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="endDateTime">EndDateTime to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.CalendarDetail> ByEndDateTime(this IQueryable<classRoomWebSite.Data.CalendarDetail> queryable, System.DateTime? endDateTime, params System.DateTime?[] additionalValues)
        {
            var endDateTimeList = new List<System.DateTime?> { endDateTime };

            if (additionalValues != null)
                endDateTimeList.AddRange(additionalValues);
            else
                endDateTimeList.Add(null);

            if (endDateTimeList.Count == 1)
                return queryable.ByEndDateTime(endDateTimeList[0]);

            return queryable.ByEndDateTime(endDateTimeList);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.CalendarDetail.EndDateTime"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.CalendarDetail> ByEndDateTime(this IQueryable<classRoomWebSite.Data.CalendarDetail> queryable, IEnumerable<System.DateTime?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<classRoomWebSite.Data.CalendarDetail, bool>("EndDateTime", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.CalendarDetail.FeeStaff"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="feeStaff">FeeStaff to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.CalendarDetail> ByFeeStaff(this IQueryable<classRoomWebSite.Data.CalendarDetail> queryable, System.Int32? feeStaff)
        {
            // support nulls
            return feeStaff == null 
                ? queryable.Where(c => c.FeeStaff == null) 
                : queryable.Where(c => c.FeeStaff == feeStaff);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.CalendarDetail.FeeStaff"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="feeStaff">FeeStaff to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.CalendarDetail> ByFeeStaff(this IQueryable<classRoomWebSite.Data.CalendarDetail> queryable, ComparisonOperator comparisonOperator, System.Int32? feeStaff)
        {
            if (feeStaff == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("feeStaff", "Parameter 'feeStaff' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(c => c.FeeStaff > feeStaff);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(c => c.FeeStaff >= feeStaff);
                case ComparisonOperator.LessThan:
                    return queryable.Where(c => c.FeeStaff < feeStaff);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(c => c.FeeStaff <= feeStaff);
                case ComparisonOperator.NotEquals:
                    return feeStaff == null 
                        ? queryable.Where(c => c.FeeStaff != null) 
                        : queryable.Where(c => c.FeeStaff != feeStaff);
                default:
                    return feeStaff == null 
                        ? queryable.Where(c => c.FeeStaff == null) 
                        : queryable.Where(c => c.FeeStaff == feeStaff);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.CalendarDetail.FeeStaff"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="feeStaff">FeeStaff to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.CalendarDetail> ByFeeStaff(this IQueryable<classRoomWebSite.Data.CalendarDetail> queryable, System.Int32? feeStaff, params System.Int32?[] additionalValues)
        {
            var feeStaffList = new List<System.Int32?> { feeStaff };

            if (additionalValues != null)
                feeStaffList.AddRange(additionalValues);
            else
                feeStaffList.Add(null);

            if (feeStaffList.Count == 1)
                return queryable.ByFeeStaff(feeStaffList[0]);

            return queryable.ByFeeStaff(feeStaffList);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.CalendarDetail.FeeStaff"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.CalendarDetail> ByFeeStaff(this IQueryable<classRoomWebSite.Data.CalendarDetail> queryable, IEnumerable<System.Int32?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<classRoomWebSite.Data.CalendarDetail, bool>("FeeStaff", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.CalendarDetail.FeeNonStaff"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="feeNonStaff">FeeNonStaff to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.CalendarDetail> ByFeeNonStaff(this IQueryable<classRoomWebSite.Data.CalendarDetail> queryable, System.Int32? feeNonStaff)
        {
            // support nulls
            return feeNonStaff == null 
                ? queryable.Where(c => c.FeeNonStaff == null) 
                : queryable.Where(c => c.FeeNonStaff == feeNonStaff);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.CalendarDetail.FeeNonStaff"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="feeNonStaff">FeeNonStaff to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.CalendarDetail> ByFeeNonStaff(this IQueryable<classRoomWebSite.Data.CalendarDetail> queryable, ComparisonOperator comparisonOperator, System.Int32? feeNonStaff)
        {
            if (feeNonStaff == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("feeNonStaff", "Parameter 'feeNonStaff' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(c => c.FeeNonStaff > feeNonStaff);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(c => c.FeeNonStaff >= feeNonStaff);
                case ComparisonOperator.LessThan:
                    return queryable.Where(c => c.FeeNonStaff < feeNonStaff);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(c => c.FeeNonStaff <= feeNonStaff);
                case ComparisonOperator.NotEquals:
                    return feeNonStaff == null 
                        ? queryable.Where(c => c.FeeNonStaff != null) 
                        : queryable.Where(c => c.FeeNonStaff != feeNonStaff);
                default:
                    return feeNonStaff == null 
                        ? queryable.Where(c => c.FeeNonStaff == null) 
                        : queryable.Where(c => c.FeeNonStaff == feeNonStaff);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.CalendarDetail.FeeNonStaff"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="feeNonStaff">FeeNonStaff to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.CalendarDetail> ByFeeNonStaff(this IQueryable<classRoomWebSite.Data.CalendarDetail> queryable, System.Int32? feeNonStaff, params System.Int32?[] additionalValues)
        {
            var feeNonStaffList = new List<System.Int32?> { feeNonStaff };

            if (additionalValues != null)
                feeNonStaffList.AddRange(additionalValues);
            else
                feeNonStaffList.Add(null);

            if (feeNonStaffList.Count == 1)
                return queryable.ByFeeNonStaff(feeNonStaffList[0]);

            return queryable.ByFeeNonStaff(feeNonStaffList);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.CalendarDetail.FeeNonStaff"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.CalendarDetail> ByFeeNonStaff(this IQueryable<classRoomWebSite.Data.CalendarDetail> queryable, IEnumerable<System.Int32?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<classRoomWebSite.Data.CalendarDetail, bool>("FeeNonStaff", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.CalendarDetail.Contact"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="contact">Contact to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.CalendarDetail> ByContact(this IQueryable<classRoomWebSite.Data.CalendarDetail> queryable, System.String contact)
        {
            // support nulls
            return contact == null 
                ? queryable.Where(c => c.Contact == null) 
                : queryable.Where(c => c.Contact == contact);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.CalendarDetail.Contact"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="contact">Contact to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.CalendarDetail> ByContact(this IQueryable<classRoomWebSite.Data.CalendarDetail> queryable, ContainmentOperator containmentOperator, System.String contact)
        {
            if (contact == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("contact", "Parameter 'contact' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(c => c.Contact.Contains(contact));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(c => c.Contact.StartsWith(contact));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(c => c.Contact.EndsWith(contact));
                case ContainmentOperator.NotContains:
                    return queryable.Where(c => c.Contact.Contains(contact) == false);
                case ContainmentOperator.NotEquals:
                    return contact == null 
                        ? queryable.Where(c => c.Contact != null) 
                        : queryable.Where(c => c.Contact != contact);
                default:
                    return contact == null 
                        ? queryable.Where(c => c.Contact == null) 
                        : queryable.Where(c => c.Contact == contact);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.CalendarDetail.Contact"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="contact">Contact to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.CalendarDetail> ByContact(this IQueryable<classRoomWebSite.Data.CalendarDetail> queryable, System.String contact, params System.String[] additionalValues)
        {
            var contactList = new List<System.String> { contact };

            if (additionalValues != null)
                contactList.AddRange(additionalValues);
            else
                contactList.Add(null);

            if (contactList.Count == 1)
                return queryable.ByContact(contactList[0]);

            return queryable.ByContact(contactList);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.CalendarDetail.Contact"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.CalendarDetail> ByContact(this IQueryable<classRoomWebSite.Data.CalendarDetail> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<classRoomWebSite.Data.CalendarDetail, bool>("Contact", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.CalendarDetail.ContactTel"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="contactTel">ContactTel to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.CalendarDetail> ByContactTel(this IQueryable<classRoomWebSite.Data.CalendarDetail> queryable, System.String contactTel)
        {
            // support nulls
            return contactTel == null 
                ? queryable.Where(c => c.ContactTel == null) 
                : queryable.Where(c => c.ContactTel == contactTel);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.CalendarDetail.ContactTel"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="contactTel">ContactTel to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.CalendarDetail> ByContactTel(this IQueryable<classRoomWebSite.Data.CalendarDetail> queryable, ContainmentOperator containmentOperator, System.String contactTel)
        {
            if (contactTel == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("contactTel", "Parameter 'contactTel' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(c => c.ContactTel.Contains(contactTel));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(c => c.ContactTel.StartsWith(contactTel));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(c => c.ContactTel.EndsWith(contactTel));
                case ContainmentOperator.NotContains:
                    return queryable.Where(c => c.ContactTel.Contains(contactTel) == false);
                case ContainmentOperator.NotEquals:
                    return contactTel == null 
                        ? queryable.Where(c => c.ContactTel != null) 
                        : queryable.Where(c => c.ContactTel != contactTel);
                default:
                    return contactTel == null 
                        ? queryable.Where(c => c.ContactTel == null) 
                        : queryable.Where(c => c.ContactTel == contactTel);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.CalendarDetail.ContactTel"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="contactTel">ContactTel to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.CalendarDetail> ByContactTel(this IQueryable<classRoomWebSite.Data.CalendarDetail> queryable, System.String contactTel, params System.String[] additionalValues)
        {
            var contactTelList = new List<System.String> { contactTel };

            if (additionalValues != null)
                contactTelList.AddRange(additionalValues);
            else
                contactTelList.Add(null);

            if (contactTelList.Count == 1)
                return queryable.ByContactTel(contactTelList[0]);

            return queryable.ByContactTel(contactTelList);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.CalendarDetail.ContactTel"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.CalendarDetail> ByContactTel(this IQueryable<classRoomWebSite.Data.CalendarDetail> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<classRoomWebSite.Data.CalendarDetail, bool>("ContactTel", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.CalendarDetail.Describe"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="describe">Describe to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.CalendarDetail> ByDescribe(this IQueryable<classRoomWebSite.Data.CalendarDetail> queryable, System.String describe)
        {
            // support nulls
            return describe == null 
                ? queryable.Where(c => c.Describe == null) 
                : queryable.Where(c => c.Describe == describe);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.CalendarDetail.Describe"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="describe">Describe to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.CalendarDetail> ByDescribe(this IQueryable<classRoomWebSite.Data.CalendarDetail> queryable, ContainmentOperator containmentOperator, System.String describe)
        {
            if (describe == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("describe", "Parameter 'describe' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(c => c.Describe.Contains(describe));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(c => c.Describe.StartsWith(describe));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(c => c.Describe.EndsWith(describe));
                case ContainmentOperator.NotContains:
                    return queryable.Where(c => c.Describe.Contains(describe) == false);
                case ContainmentOperator.NotEquals:
                    return describe == null 
                        ? queryable.Where(c => c.Describe != null) 
                        : queryable.Where(c => c.Describe != describe);
                default:
                    return describe == null 
                        ? queryable.Where(c => c.Describe == null) 
                        : queryable.Where(c => c.Describe == describe);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.CalendarDetail.Describe"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="describe">Describe to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.CalendarDetail> ByDescribe(this IQueryable<classRoomWebSite.Data.CalendarDetail> queryable, System.String describe, params System.String[] additionalValues)
        {
            var describeList = new List<System.String> { describe };

            if (additionalValues != null)
                describeList.AddRange(additionalValues);
            else
                describeList.Add(null);

            if (describeList.Count == 1)
                return queryable.ByDescribe(describeList[0]);

            return queryable.ByDescribe(describeList);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.CalendarDetail.Describe"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.CalendarDetail> ByDescribe(this IQueryable<classRoomWebSite.Data.CalendarDetail> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<classRoomWebSite.Data.CalendarDetail, bool>("Describe", values);
            return queryable.Where(expression);
        }

        #region Query
        /// <summary>
        /// A private class for lazy loading static compiled queries.
        /// </summary>
        private static partial class Query
        {
            [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
            internal static readonly Func<classRoomWebSite.Data.classRoomWebSiteDataContext, System.Guid, classRoomWebSite.Data.CalendarDetail> GetByKey =
                System.Data.Objects.CompiledQuery.Compile(
                    (classRoomWebSite.Data.classRoomWebSiteDataContext db, System.Guid identification) =>
                        db.CalendarDetail.FirstOrDefault(c => c.Identification == identification));

            [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
            internal static readonly Func<classRoomWebSite.Data.classRoomWebSiteDataContext, System.Guid, classRoomWebSite.Data.CalendarDetail> GetByIdentification =
                System.Data.Objects.CompiledQuery.Compile(
                    (classRoomWebSite.Data.classRoomWebSiteDataContext db, System.Guid identification) =>
                        db.CalendarDetail.FirstOrDefault(c => c.Identification == identification));

        }
        #endregion
    }
}
#pragma warning restore 1591
