#pragma warning disable 1591
// <auto-generated>
//     This code was generated from a CodeSmith Generator template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace classRoomWebSite.Data
{
    /// <summary>
    /// The query extension class for Student.
    /// </summary>
    public static partial class StudentExtensions
    {
        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static classRoomWebSite.Data.Student GetByKey(this IQueryable<classRoomWebSite.Data.Student> queryable, System.Guid identification)
        {
            return queryable.FirstOrDefault(s => s.Identification == identification);
        }
        /// <summary>
        /// Gets an instance by using a unique index.
        /// </summary>
        /// <returns>An instance of the entity or null if not found.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static classRoomWebSite.Data.Student GetByIdentification(this IQueryable<classRoomWebSite.Data.Student> queryable, System.Guid identification)
        {
            var entity = queryable as System.Data.Objects.ObjectSet<classRoomWebSite.Data.Student>;
            if (entity != null && !entity.Context.ContextOptions.LazyLoadingEnabled)
                return Query.GetByIdentification.Invoke((classRoomWebSite.Data.classRoomWebSiteDataContext)entity.Context, identification);

            return queryable.FirstOrDefault(s => s.Identification == identification);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.Student.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.Student> ByIdentification(this IQueryable<classRoomWebSite.Data.Student> queryable, System.Guid identification)
        {
            return queryable.Where(s => s.Identification == identification);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.Student.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.Student> ByIdentification(this IQueryable<classRoomWebSite.Data.Student> queryable, ComparisonOperator comparisonOperator, System.Guid identification)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                case ComparisonOperator.GreaterThanOrEquals:
                case ComparisonOperator.LessThan:
                case ComparisonOperator.LessThanOrEquals:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support System.Guid type.", "comparisonOperator");
                case ComparisonOperator.NotEquals:
                    return queryable.Where(s => s.Identification != identification);
                default:
                    return queryable.Where(s => s.Identification == identification);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.Student.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.Student> ByIdentification(this IQueryable<classRoomWebSite.Data.Student> queryable, System.Guid identification, params System.Guid[] additionalValues)
        {
            var identificationList = new List<System.Guid> { identification };

            if (additionalValues != null)
                identificationList.AddRange(additionalValues);

            if (identificationList.Count == 1)
                return queryable.ByIdentification(identificationList[0]);

            return queryable.ByIdentification(identificationList);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.Student.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.Student> ByIdentification(this IQueryable<classRoomWebSite.Data.Student> queryable, IEnumerable<System.Guid> values)
        {
            return queryable.Where(s => values.Contains(s.Identification));
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.Student.Name"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="name">Name to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.Student> ByName(this IQueryable<classRoomWebSite.Data.Student> queryable, System.String name)
        {
            return queryable.Where(s => s.Name == name);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.Student.Name"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="name">Name to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.Student> ByName(this IQueryable<classRoomWebSite.Data.Student> queryable, ContainmentOperator containmentOperator, System.String name)
        {
            if (name == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("name", "Parameter 'name' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(s => s.Name.Contains(name));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(s => s.Name.StartsWith(name));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(s => s.Name.EndsWith(name));
                case ContainmentOperator.NotContains:
                    return queryable.Where(s => s.Name.Contains(name) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(s => s.Name != name);
                default:
                    return queryable.Where(s => s.Name == name);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.Student.Name"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="name">Name to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.Student> ByName(this IQueryable<classRoomWebSite.Data.Student> queryable, System.String name, params System.String[] additionalValues)
        {
            var nameList = new List<System.String> { name };

            if (additionalValues != null)
                nameList.AddRange(additionalValues);

            if (nameList.Count == 1)
                return queryable.ByName(nameList[0]);

            return queryable.ByName(nameList);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.Student.Name"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.Student> ByName(this IQueryable<classRoomWebSite.Data.Student> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(s => values.Contains(s.Name));
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.Student.BirthDay"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="birthDay">BirthDay to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.Student> ByBirthDay(this IQueryable<classRoomWebSite.Data.Student> queryable, System.DateTime? birthDay)
        {
            // support nulls
            return birthDay == null 
                ? queryable.Where(s => s.BirthDay == null) 
                : queryable.Where(s => s.BirthDay == birthDay);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.Student.BirthDay"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="birthDay">BirthDay to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.Student> ByBirthDay(this IQueryable<classRoomWebSite.Data.Student> queryable, ComparisonOperator comparisonOperator, System.DateTime? birthDay)
        {
            if (birthDay == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("birthDay", "Parameter 'birthDay' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(s => s.BirthDay > birthDay);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(s => s.BirthDay >= birthDay);
                case ComparisonOperator.LessThan:
                    return queryable.Where(s => s.BirthDay < birthDay);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(s => s.BirthDay <= birthDay);
                case ComparisonOperator.NotEquals:
                    return birthDay == null 
                        ? queryable.Where(s => s.BirthDay != null) 
                        : queryable.Where(s => s.BirthDay != birthDay);
                default:
                    return birthDay == null 
                        ? queryable.Where(s => s.BirthDay == null) 
                        : queryable.Where(s => s.BirthDay == birthDay);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.Student.BirthDay"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="birthDay">BirthDay to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.Student> ByBirthDay(this IQueryable<classRoomWebSite.Data.Student> queryable, System.DateTime? birthDay, params System.DateTime?[] additionalValues)
        {
            var birthDayList = new List<System.DateTime?> { birthDay };

            if (additionalValues != null)
                birthDayList.AddRange(additionalValues);
            else
                birthDayList.Add(null);

            if (birthDayList.Count == 1)
                return queryable.ByBirthDay(birthDayList[0]);

            return queryable.ByBirthDay(birthDayList);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.Student.BirthDay"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.Student> ByBirthDay(this IQueryable<classRoomWebSite.Data.Student> queryable, IEnumerable<System.DateTime?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<classRoomWebSite.Data.Student, bool>("BirthDay", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.Student.Gender"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="gender">Gender to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.Student> ByGender(this IQueryable<classRoomWebSite.Data.Student> queryable, System.String gender)
        {
            // support nulls
            return gender == null 
                ? queryable.Where(s => s.Gender == null) 
                : queryable.Where(s => s.Gender == gender);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.Student.Gender"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="gender">Gender to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.Student> ByGender(this IQueryable<classRoomWebSite.Data.Student> queryable, ContainmentOperator containmentOperator, System.String gender)
        {
            if (gender == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("gender", "Parameter 'gender' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(s => s.Gender.Contains(gender));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(s => s.Gender.StartsWith(gender));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(s => s.Gender.EndsWith(gender));
                case ContainmentOperator.NotContains:
                    return queryable.Where(s => s.Gender.Contains(gender) == false);
                case ContainmentOperator.NotEquals:
                    return gender == null 
                        ? queryable.Where(s => s.Gender != null) 
                        : queryable.Where(s => s.Gender != gender);
                default:
                    return gender == null 
                        ? queryable.Where(s => s.Gender == null) 
                        : queryable.Where(s => s.Gender == gender);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.Student.Gender"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="gender">Gender to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.Student> ByGender(this IQueryable<classRoomWebSite.Data.Student> queryable, System.String gender, params System.String[] additionalValues)
        {
            var genderList = new List<System.String> { gender };

            if (additionalValues != null)
                genderList.AddRange(additionalValues);
            else
                genderList.Add(null);

            if (genderList.Count == 1)
                return queryable.ByGender(genderList[0]);

            return queryable.ByGender(genderList);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.Student.Gender"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.Student> ByGender(this IQueryable<classRoomWebSite.Data.Student> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<classRoomWebSite.Data.Student, bool>("Gender", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.Student.CreateDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="createDate">CreateDate to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.Student> ByCreateDate(this IQueryable<classRoomWebSite.Data.Student> queryable, System.DateTime? createDate)
        {
            // support nulls
            return createDate == null 
                ? queryable.Where(s => s.CreateDate == null) 
                : queryable.Where(s => s.CreateDate == createDate);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.Student.CreateDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="createDate">CreateDate to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.Student> ByCreateDate(this IQueryable<classRoomWebSite.Data.Student> queryable, ComparisonOperator comparisonOperator, System.DateTime? createDate)
        {
            if (createDate == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("createDate", "Parameter 'createDate' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(s => s.CreateDate > createDate);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(s => s.CreateDate >= createDate);
                case ComparisonOperator.LessThan:
                    return queryable.Where(s => s.CreateDate < createDate);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(s => s.CreateDate <= createDate);
                case ComparisonOperator.NotEquals:
                    return createDate == null 
                        ? queryable.Where(s => s.CreateDate != null) 
                        : queryable.Where(s => s.CreateDate != createDate);
                default:
                    return createDate == null 
                        ? queryable.Where(s => s.CreateDate == null) 
                        : queryable.Where(s => s.CreateDate == createDate);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.Student.CreateDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="createDate">CreateDate to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.Student> ByCreateDate(this IQueryable<classRoomWebSite.Data.Student> queryable, System.DateTime? createDate, params System.DateTime?[] additionalValues)
        {
            var createDateList = new List<System.DateTime?> { createDate };

            if (additionalValues != null)
                createDateList.AddRange(additionalValues);
            else
                createDateList.Add(null);

            if (createDateList.Count == 1)
                return queryable.ByCreateDate(createDateList[0]);

            return queryable.ByCreateDate(createDateList);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.Student.CreateDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.Student> ByCreateDate(this IQueryable<classRoomWebSite.Data.Student> queryable, IEnumerable<System.DateTime?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<classRoomWebSite.Data.Student, bool>("CreateDate", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.Student.Education"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="education">Education to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.Student> ByEducation(this IQueryable<classRoomWebSite.Data.Student> queryable, System.String education)
        {
            // support nulls
            return education == null 
                ? queryable.Where(s => s.Education == null) 
                : queryable.Where(s => s.Education == education);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.Student.Education"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="education">Education to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.Student> ByEducation(this IQueryable<classRoomWebSite.Data.Student> queryable, ContainmentOperator containmentOperator, System.String education)
        {
            if (education == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("education", "Parameter 'education' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(s => s.Education.Contains(education));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(s => s.Education.StartsWith(education));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(s => s.Education.EndsWith(education));
                case ContainmentOperator.NotContains:
                    return queryable.Where(s => s.Education.Contains(education) == false);
                case ContainmentOperator.NotEquals:
                    return education == null 
                        ? queryable.Where(s => s.Education != null) 
                        : queryable.Where(s => s.Education != education);
                default:
                    return education == null 
                        ? queryable.Where(s => s.Education == null) 
                        : queryable.Where(s => s.Education == education);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.Student.Education"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="education">Education to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.Student> ByEducation(this IQueryable<classRoomWebSite.Data.Student> queryable, System.String education, params System.String[] additionalValues)
        {
            var educationList = new List<System.String> { education };

            if (additionalValues != null)
                educationList.AddRange(additionalValues);
            else
                educationList.Add(null);

            if (educationList.Count == 1)
                return queryable.ByEducation(educationList[0]);

            return queryable.ByEducation(educationList);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.Student.Education"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.Student> ByEducation(this IQueryable<classRoomWebSite.Data.Student> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<classRoomWebSite.Data.Student, bool>("Education", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.Student.Address"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="address">Address to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.Student> ByAddress(this IQueryable<classRoomWebSite.Data.Student> queryable, System.String address)
        {
            // support nulls
            return address == null 
                ? queryable.Where(s => s.Address == null) 
                : queryable.Where(s => s.Address == address);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.Student.Address"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="address">Address to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.Student> ByAddress(this IQueryable<classRoomWebSite.Data.Student> queryable, ContainmentOperator containmentOperator, System.String address)
        {
            if (address == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("address", "Parameter 'address' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(s => s.Address.Contains(address));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(s => s.Address.StartsWith(address));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(s => s.Address.EndsWith(address));
                case ContainmentOperator.NotContains:
                    return queryable.Where(s => s.Address.Contains(address) == false);
                case ContainmentOperator.NotEquals:
                    return address == null 
                        ? queryable.Where(s => s.Address != null) 
                        : queryable.Where(s => s.Address != address);
                default:
                    return address == null 
                        ? queryable.Where(s => s.Address == null) 
                        : queryable.Where(s => s.Address == address);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.Student.Address"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="address">Address to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.Student> ByAddress(this IQueryable<classRoomWebSite.Data.Student> queryable, System.String address, params System.String[] additionalValues)
        {
            var addressList = new List<System.String> { address };

            if (additionalValues != null)
                addressList.AddRange(additionalValues);
            else
                addressList.Add(null);

            if (addressList.Count == 1)
                return queryable.ByAddress(addressList[0]);

            return queryable.ByAddress(addressList);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.Student.Address"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.Student> ByAddress(this IQueryable<classRoomWebSite.Data.Student> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<classRoomWebSite.Data.Student, bool>("Address", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.Student.Company"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="company">Company to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.Student> ByCompany(this IQueryable<classRoomWebSite.Data.Student> queryable, System.String company)
        {
            // support nulls
            return company == null 
                ? queryable.Where(s => s.Company == null) 
                : queryable.Where(s => s.Company == company);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.Student.Company"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="company">Company to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.Student> ByCompany(this IQueryable<classRoomWebSite.Data.Student> queryable, ContainmentOperator containmentOperator, System.String company)
        {
            if (company == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("company", "Parameter 'company' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(s => s.Company.Contains(company));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(s => s.Company.StartsWith(company));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(s => s.Company.EndsWith(company));
                case ContainmentOperator.NotContains:
                    return queryable.Where(s => s.Company.Contains(company) == false);
                case ContainmentOperator.NotEquals:
                    return company == null 
                        ? queryable.Where(s => s.Company != null) 
                        : queryable.Where(s => s.Company != company);
                default:
                    return company == null 
                        ? queryable.Where(s => s.Company == null) 
                        : queryable.Where(s => s.Company == company);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.Student.Company"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="company">Company to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.Student> ByCompany(this IQueryable<classRoomWebSite.Data.Student> queryable, System.String company, params System.String[] additionalValues)
        {
            var companyList = new List<System.String> { company };

            if (additionalValues != null)
                companyList.AddRange(additionalValues);
            else
                companyList.Add(null);

            if (companyList.Count == 1)
                return queryable.ByCompany(companyList[0]);

            return queryable.ByCompany(companyList);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.Student.Company"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.Student> ByCompany(this IQueryable<classRoomWebSite.Data.Student> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<classRoomWebSite.Data.Student, bool>("Company", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.Student.Telno"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="telno">Telno to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.Student> ByTelno(this IQueryable<classRoomWebSite.Data.Student> queryable, System.String telno)
        {
            // support nulls
            return telno == null 
                ? queryable.Where(s => s.Telno == null) 
                : queryable.Where(s => s.Telno == telno);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.Student.Telno"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="telno">Telno to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.Student> ByTelno(this IQueryable<classRoomWebSite.Data.Student> queryable, ContainmentOperator containmentOperator, System.String telno)
        {
            if (telno == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("telno", "Parameter 'telno' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(s => s.Telno.Contains(telno));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(s => s.Telno.StartsWith(telno));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(s => s.Telno.EndsWith(telno));
                case ContainmentOperator.NotContains:
                    return queryable.Where(s => s.Telno.Contains(telno) == false);
                case ContainmentOperator.NotEquals:
                    return telno == null 
                        ? queryable.Where(s => s.Telno != null) 
                        : queryable.Where(s => s.Telno != telno);
                default:
                    return telno == null 
                        ? queryable.Where(s => s.Telno == null) 
                        : queryable.Where(s => s.Telno == telno);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.Student.Telno"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="telno">Telno to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.Student> ByTelno(this IQueryable<classRoomWebSite.Data.Student> queryable, System.String telno, params System.String[] additionalValues)
        {
            var telnoList = new List<System.String> { telno };

            if (additionalValues != null)
                telnoList.AddRange(additionalValues);
            else
                telnoList.Add(null);

            if (telnoList.Count == 1)
                return queryable.ByTelno(telnoList[0]);

            return queryable.ByTelno(telnoList);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.Student.Telno"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.Student> ByTelno(this IQueryable<classRoomWebSite.Data.Student> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<classRoomWebSite.Data.Student, bool>("Telno", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.Student.Cellno"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="cellno">Cellno to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.Student> ByCellno(this IQueryable<classRoomWebSite.Data.Student> queryable, System.String cellno)
        {
            // support nulls
            return cellno == null 
                ? queryable.Where(s => s.Cellno == null) 
                : queryable.Where(s => s.Cellno == cellno);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.Student.Cellno"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="cellno">Cellno to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.Student> ByCellno(this IQueryable<classRoomWebSite.Data.Student> queryable, ContainmentOperator containmentOperator, System.String cellno)
        {
            if (cellno == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("cellno", "Parameter 'cellno' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(s => s.Cellno.Contains(cellno));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(s => s.Cellno.StartsWith(cellno));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(s => s.Cellno.EndsWith(cellno));
                case ContainmentOperator.NotContains:
                    return queryable.Where(s => s.Cellno.Contains(cellno) == false);
                case ContainmentOperator.NotEquals:
                    return cellno == null 
                        ? queryable.Where(s => s.Cellno != null) 
                        : queryable.Where(s => s.Cellno != cellno);
                default:
                    return cellno == null 
                        ? queryable.Where(s => s.Cellno == null) 
                        : queryable.Where(s => s.Cellno == cellno);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.Student.Cellno"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="cellno">Cellno to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.Student> ByCellno(this IQueryable<classRoomWebSite.Data.Student> queryable, System.String cellno, params System.String[] additionalValues)
        {
            var cellnoList = new List<System.String> { cellno };

            if (additionalValues != null)
                cellnoList.AddRange(additionalValues);
            else
                cellnoList.Add(null);

            if (cellnoList.Count == 1)
                return queryable.ByCellno(cellnoList[0]);

            return queryable.ByCellno(cellnoList);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.Student.Cellno"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.Student> ByCellno(this IQueryable<classRoomWebSite.Data.Student> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<classRoomWebSite.Data.Student, bool>("Cellno", values);
            return queryable.Where(expression);
        }

        #region Query
        /// <summary>
        /// A private class for lazy loading static compiled queries.
        /// </summary>
        private static partial class Query
        {
            [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
            internal static readonly Func<classRoomWebSite.Data.classRoomWebSiteDataContext, System.Guid, classRoomWebSite.Data.Student> GetByKey =
                System.Data.Objects.CompiledQuery.Compile(
                    (classRoomWebSite.Data.classRoomWebSiteDataContext db, System.Guid identification) =>
                        db.Student.FirstOrDefault(s => s.Identification == identification));

            [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
            internal static readonly Func<classRoomWebSite.Data.classRoomWebSiteDataContext, System.Guid, classRoomWebSite.Data.Student> GetByIdentification =
                System.Data.Objects.CompiledQuery.Compile(
                    (classRoomWebSite.Data.classRoomWebSiteDataContext db, System.Guid identification) =>
                        db.Student.FirstOrDefault(s => s.Identification == identification));

        }
        #endregion
    }
}
#pragma warning restore 1591
