#pragma warning disable 1591
// <auto-generated>
//     This code was generated from a CodeSmith Generator template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace classRoomWebSite.Data
{
    /// <summary>
    /// The query extension class for Teacher.
    /// </summary>
    public static partial class TeacherExtensions
    {
        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static classRoomWebSite.Data.Teacher GetByKey(this IQueryable<classRoomWebSite.Data.Teacher> queryable, System.Guid identification)
        {
            return queryable.FirstOrDefault(t => t.Identification == identification);
        }
        /// <summary>
        /// Gets an instance by using a unique index.
        /// </summary>
        /// <returns>An instance of the entity or null if not found.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static classRoomWebSite.Data.Teacher GetByIdentification(this IQueryable<classRoomWebSite.Data.Teacher> queryable, System.Guid identification)
        {
            var entity = queryable as System.Data.Objects.ObjectSet<classRoomWebSite.Data.Teacher>;
            if (entity != null && !entity.Context.ContextOptions.LazyLoadingEnabled)
                return Query.GetByIdentification.Invoke((classRoomWebSite.Data.classRoomWebSiteDataContext)entity.Context, identification);

            return queryable.FirstOrDefault(t => t.Identification == identification);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.Teacher.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.Teacher> ByIdentification(this IQueryable<classRoomWebSite.Data.Teacher> queryable, System.Guid identification)
        {
            return queryable.Where(t => t.Identification == identification);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.Teacher.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.Teacher> ByIdentification(this IQueryable<classRoomWebSite.Data.Teacher> queryable, ComparisonOperator comparisonOperator, System.Guid identification)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                case ComparisonOperator.GreaterThanOrEquals:
                case ComparisonOperator.LessThan:
                case ComparisonOperator.LessThanOrEquals:
                    throw new ArgumentException("Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support System.Guid type.", "comparisonOperator");
                case ComparisonOperator.NotEquals:
                    return queryable.Where(t => t.Identification != identification);
                default:
                    return queryable.Where(t => t.Identification == identification);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.Teacher.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.Teacher> ByIdentification(this IQueryable<classRoomWebSite.Data.Teacher> queryable, System.Guid identification, params System.Guid[] additionalValues)
        {
            var identificationList = new List<System.Guid> { identification };

            if (additionalValues != null)
                identificationList.AddRange(additionalValues);

            if (identificationList.Count == 1)
                return queryable.ByIdentification(identificationList[0]);

            return queryable.ByIdentification(identificationList);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.Teacher.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.Teacher> ByIdentification(this IQueryable<classRoomWebSite.Data.Teacher> queryable, IEnumerable<System.Guid> values)
        {
            return queryable.Where(t => values.Contains(t.Identification));
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.Teacher.PicFile"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="picFile">PicFile to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.Teacher> ByPicFile(this IQueryable<classRoomWebSite.Data.Teacher> queryable, System.String picFile)
        {
            // support nulls
            return picFile == null 
                ? queryable.Where(t => t.PicFile == null) 
                : queryable.Where(t => t.PicFile == picFile);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.Teacher.PicFile"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="picFile">PicFile to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.Teacher> ByPicFile(this IQueryable<classRoomWebSite.Data.Teacher> queryable, ContainmentOperator containmentOperator, System.String picFile)
        {
            if (picFile == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("picFile", "Parameter 'picFile' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(t => t.PicFile.Contains(picFile));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(t => t.PicFile.StartsWith(picFile));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(t => t.PicFile.EndsWith(picFile));
                case ContainmentOperator.NotContains:
                    return queryable.Where(t => t.PicFile.Contains(picFile) == false);
                case ContainmentOperator.NotEquals:
                    return picFile == null 
                        ? queryable.Where(t => t.PicFile != null) 
                        : queryable.Where(t => t.PicFile != picFile);
                default:
                    return picFile == null 
                        ? queryable.Where(t => t.PicFile == null) 
                        : queryable.Where(t => t.PicFile == picFile);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.Teacher.PicFile"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="picFile">PicFile to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.Teacher> ByPicFile(this IQueryable<classRoomWebSite.Data.Teacher> queryable, System.String picFile, params System.String[] additionalValues)
        {
            var picFileList = new List<System.String> { picFile };

            if (additionalValues != null)
                picFileList.AddRange(additionalValues);
            else
                picFileList.Add(null);

            if (picFileList.Count == 1)
                return queryable.ByPicFile(picFileList[0]);

            return queryable.ByPicFile(picFileList);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.Teacher.PicFile"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.Teacher> ByPicFile(this IQueryable<classRoomWebSite.Data.Teacher> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<classRoomWebSite.Data.Teacher, bool>("PicFile", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.Teacher.Name"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="name">Name to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.Teacher> ByName(this IQueryable<classRoomWebSite.Data.Teacher> queryable, System.String name)
        {
            return queryable.Where(t => t.Name == name);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.Teacher.Name"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="name">Name to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.Teacher> ByName(this IQueryable<classRoomWebSite.Data.Teacher> queryable, ContainmentOperator containmentOperator, System.String name)
        {
            if (name == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("name", "Parameter 'name' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(t => t.Name.Contains(name));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(t => t.Name.StartsWith(name));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(t => t.Name.EndsWith(name));
                case ContainmentOperator.NotContains:
                    return queryable.Where(t => t.Name.Contains(name) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(t => t.Name != name);
                default:
                    return queryable.Where(t => t.Name == name);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.Teacher.Name"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="name">Name to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.Teacher> ByName(this IQueryable<classRoomWebSite.Data.Teacher> queryable, System.String name, params System.String[] additionalValues)
        {
            var nameList = new List<System.String> { name };

            if (additionalValues != null)
                nameList.AddRange(additionalValues);

            if (nameList.Count == 1)
                return queryable.ByName(nameList[0]);

            return queryable.ByName(nameList);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.Teacher.Name"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.Teacher> ByName(this IQueryable<classRoomWebSite.Data.Teacher> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(t => values.Contains(t.Name));
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.Teacher.Gender"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="gender">Gender to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.Teacher> ByGender(this IQueryable<classRoomWebSite.Data.Teacher> queryable, System.String gender)
        {
            // support nulls
            return gender == null 
                ? queryable.Where(t => t.Gender == null) 
                : queryable.Where(t => t.Gender == gender);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.Teacher.Gender"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="gender">Gender to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.Teacher> ByGender(this IQueryable<classRoomWebSite.Data.Teacher> queryable, ContainmentOperator containmentOperator, System.String gender)
        {
            if (gender == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("gender", "Parameter 'gender' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(t => t.Gender.Contains(gender));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(t => t.Gender.StartsWith(gender));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(t => t.Gender.EndsWith(gender));
                case ContainmentOperator.NotContains:
                    return queryable.Where(t => t.Gender.Contains(gender) == false);
                case ContainmentOperator.NotEquals:
                    return gender == null 
                        ? queryable.Where(t => t.Gender != null) 
                        : queryable.Where(t => t.Gender != gender);
                default:
                    return gender == null 
                        ? queryable.Where(t => t.Gender == null) 
                        : queryable.Where(t => t.Gender == gender);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.Teacher.Gender"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="gender">Gender to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.Teacher> ByGender(this IQueryable<classRoomWebSite.Data.Teacher> queryable, System.String gender, params System.String[] additionalValues)
        {
            var genderList = new List<System.String> { gender };

            if (additionalValues != null)
                genderList.AddRange(additionalValues);
            else
                genderList.Add(null);

            if (genderList.Count == 1)
                return queryable.ByGender(genderList[0]);

            return queryable.ByGender(genderList);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.Teacher.Gender"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.Teacher> ByGender(this IQueryable<classRoomWebSite.Data.Teacher> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<classRoomWebSite.Data.Teacher, bool>("Gender", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.Teacher.CreateDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="createDate">CreateDate to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.Teacher> ByCreateDate(this IQueryable<classRoomWebSite.Data.Teacher> queryable, System.DateTime createDate)
        {
            return queryable.Where(t => t.CreateDate == createDate);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.Teacher.CreateDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="createDate">CreateDate to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.Teacher> ByCreateDate(this IQueryable<classRoomWebSite.Data.Teacher> queryable, ComparisonOperator comparisonOperator, System.DateTime createDate)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(t => t.CreateDate > createDate);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(t => t.CreateDate >= createDate);
                case ComparisonOperator.LessThan:
                    return queryable.Where(t => t.CreateDate < createDate);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(t => t.CreateDate <= createDate);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(t => t.CreateDate != createDate);
                default:
                    return queryable.Where(t => t.CreateDate == createDate);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.Teacher.CreateDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="createDate">CreateDate to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.Teacher> ByCreateDate(this IQueryable<classRoomWebSite.Data.Teacher> queryable, System.DateTime createDate, params System.DateTime[] additionalValues)
        {
            var createDateList = new List<System.DateTime> { createDate };

            if (additionalValues != null)
                createDateList.AddRange(additionalValues);

            if (createDateList.Count == 1)
                return queryable.ByCreateDate(createDateList[0]);

            return queryable.ByCreateDate(createDateList);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.Teacher.CreateDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.Teacher> ByCreateDate(this IQueryable<classRoomWebSite.Data.Teacher> queryable, IEnumerable<System.DateTime> values)
        {
            return queryable.Where(t => values.Contains(t.CreateDate));
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.Teacher.BirthDay"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="birthDay">BirthDay to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.Teacher> ByBirthDay(this IQueryable<classRoomWebSite.Data.Teacher> queryable, System.DateTime? birthDay)
        {
            // support nulls
            return birthDay == null 
                ? queryable.Where(t => t.BirthDay == null) 
                : queryable.Where(t => t.BirthDay == birthDay);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.Teacher.BirthDay"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="birthDay">BirthDay to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.Teacher> ByBirthDay(this IQueryable<classRoomWebSite.Data.Teacher> queryable, ComparisonOperator comparisonOperator, System.DateTime? birthDay)
        {
            if (birthDay == null && comparisonOperator != ComparisonOperator.Equals && comparisonOperator != ComparisonOperator.NotEquals)
                throw new ArgumentNullException("birthDay", "Parameter 'birthDay' cannot be null with the specified ComparisonOperator.  Parameter 'comparisonOperator' must be ComparisonOperator.Equals or ComparisonOperator.NotEquals to support null.");

            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(t => t.BirthDay > birthDay);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(t => t.BirthDay >= birthDay);
                case ComparisonOperator.LessThan:
                    return queryable.Where(t => t.BirthDay < birthDay);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(t => t.BirthDay <= birthDay);
                case ComparisonOperator.NotEquals:
                    return birthDay == null 
                        ? queryable.Where(t => t.BirthDay != null) 
                        : queryable.Where(t => t.BirthDay != birthDay);
                default:
                    return birthDay == null 
                        ? queryable.Where(t => t.BirthDay == null) 
                        : queryable.Where(t => t.BirthDay == birthDay);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.Teacher.BirthDay"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="birthDay">BirthDay to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.Teacher> ByBirthDay(this IQueryable<classRoomWebSite.Data.Teacher> queryable, System.DateTime? birthDay, params System.DateTime?[] additionalValues)
        {
            var birthDayList = new List<System.DateTime?> { birthDay };

            if (additionalValues != null)
                birthDayList.AddRange(additionalValues);
            else
                birthDayList.Add(null);

            if (birthDayList.Count == 1)
                return queryable.ByBirthDay(birthDayList[0]);

            return queryable.ByBirthDay(birthDayList);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.Teacher.BirthDay"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.Teacher> ByBirthDay(this IQueryable<classRoomWebSite.Data.Teacher> queryable, IEnumerable<System.DateTime?> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<classRoomWebSite.Data.Teacher, bool>("BirthDay", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.Teacher.Address"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="address">Address to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.Teacher> ByAddress(this IQueryable<classRoomWebSite.Data.Teacher> queryable, System.String address)
        {
            // support nulls
            return address == null 
                ? queryable.Where(t => t.Address == null) 
                : queryable.Where(t => t.Address == address);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.Teacher.Address"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="address">Address to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.Teacher> ByAddress(this IQueryable<classRoomWebSite.Data.Teacher> queryable, ContainmentOperator containmentOperator, System.String address)
        {
            if (address == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("address", "Parameter 'address' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(t => t.Address.Contains(address));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(t => t.Address.StartsWith(address));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(t => t.Address.EndsWith(address));
                case ContainmentOperator.NotContains:
                    return queryable.Where(t => t.Address.Contains(address) == false);
                case ContainmentOperator.NotEquals:
                    return address == null 
                        ? queryable.Where(t => t.Address != null) 
                        : queryable.Where(t => t.Address != address);
                default:
                    return address == null 
                        ? queryable.Where(t => t.Address == null) 
                        : queryable.Where(t => t.Address == address);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.Teacher.Address"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="address">Address to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.Teacher> ByAddress(this IQueryable<classRoomWebSite.Data.Teacher> queryable, System.String address, params System.String[] additionalValues)
        {
            var addressList = new List<System.String> { address };

            if (additionalValues != null)
                addressList.AddRange(additionalValues);
            else
                addressList.Add(null);

            if (addressList.Count == 1)
                return queryable.ByAddress(addressList[0]);

            return queryable.ByAddress(addressList);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.Teacher.Address"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.Teacher> ByAddress(this IQueryable<classRoomWebSite.Data.Teacher> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<classRoomWebSite.Data.Teacher, bool>("Address", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.Teacher.OfficeAddress"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="officeAddress">OfficeAddress to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.Teacher> ByOfficeAddress(this IQueryable<classRoomWebSite.Data.Teacher> queryable, System.String officeAddress)
        {
            // support nulls
            return officeAddress == null 
                ? queryable.Where(t => t.OfficeAddress == null) 
                : queryable.Where(t => t.OfficeAddress == officeAddress);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.Teacher.OfficeAddress"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="officeAddress">OfficeAddress to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.Teacher> ByOfficeAddress(this IQueryable<classRoomWebSite.Data.Teacher> queryable, ContainmentOperator containmentOperator, System.String officeAddress)
        {
            if (officeAddress == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("officeAddress", "Parameter 'officeAddress' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(t => t.OfficeAddress.Contains(officeAddress));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(t => t.OfficeAddress.StartsWith(officeAddress));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(t => t.OfficeAddress.EndsWith(officeAddress));
                case ContainmentOperator.NotContains:
                    return queryable.Where(t => t.OfficeAddress.Contains(officeAddress) == false);
                case ContainmentOperator.NotEquals:
                    return officeAddress == null 
                        ? queryable.Where(t => t.OfficeAddress != null) 
                        : queryable.Where(t => t.OfficeAddress != officeAddress);
                default:
                    return officeAddress == null 
                        ? queryable.Where(t => t.OfficeAddress == null) 
                        : queryable.Where(t => t.OfficeAddress == officeAddress);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.Teacher.OfficeAddress"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="officeAddress">OfficeAddress to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.Teacher> ByOfficeAddress(this IQueryable<classRoomWebSite.Data.Teacher> queryable, System.String officeAddress, params System.String[] additionalValues)
        {
            var officeAddressList = new List<System.String> { officeAddress };

            if (additionalValues != null)
                officeAddressList.AddRange(additionalValues);
            else
                officeAddressList.Add(null);

            if (officeAddressList.Count == 1)
                return queryable.ByOfficeAddress(officeAddressList[0]);

            return queryable.ByOfficeAddress(officeAddressList);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.Teacher.OfficeAddress"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.Teacher> ByOfficeAddress(this IQueryable<classRoomWebSite.Data.Teacher> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<classRoomWebSite.Data.Teacher, bool>("OfficeAddress", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.Teacher.TelPhone"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="telPhone">TelPhone to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.Teacher> ByTelPhone(this IQueryable<classRoomWebSite.Data.Teacher> queryable, System.String telPhone)
        {
            // support nulls
            return telPhone == null 
                ? queryable.Where(t => t.TelPhone == null) 
                : queryable.Where(t => t.TelPhone == telPhone);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.Teacher.TelPhone"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="telPhone">TelPhone to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.Teacher> ByTelPhone(this IQueryable<classRoomWebSite.Data.Teacher> queryable, ContainmentOperator containmentOperator, System.String telPhone)
        {
            if (telPhone == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("telPhone", "Parameter 'telPhone' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(t => t.TelPhone.Contains(telPhone));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(t => t.TelPhone.StartsWith(telPhone));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(t => t.TelPhone.EndsWith(telPhone));
                case ContainmentOperator.NotContains:
                    return queryable.Where(t => t.TelPhone.Contains(telPhone) == false);
                case ContainmentOperator.NotEquals:
                    return telPhone == null 
                        ? queryable.Where(t => t.TelPhone != null) 
                        : queryable.Where(t => t.TelPhone != telPhone);
                default:
                    return telPhone == null 
                        ? queryable.Where(t => t.TelPhone == null) 
                        : queryable.Where(t => t.TelPhone == telPhone);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.Teacher.TelPhone"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="telPhone">TelPhone to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.Teacher> ByTelPhone(this IQueryable<classRoomWebSite.Data.Teacher> queryable, System.String telPhone, params System.String[] additionalValues)
        {
            var telPhoneList = new List<System.String> { telPhone };

            if (additionalValues != null)
                telPhoneList.AddRange(additionalValues);
            else
                telPhoneList.Add(null);

            if (telPhoneList.Count == 1)
                return queryable.ByTelPhone(telPhoneList[0]);

            return queryable.ByTelPhone(telPhoneList);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.Teacher.TelPhone"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.Teacher> ByTelPhone(this IQueryable<classRoomWebSite.Data.Teacher> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<classRoomWebSite.Data.Teacher, bool>("TelPhone", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.Teacher.CellPhone"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="cellPhone">CellPhone to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.Teacher> ByCellPhone(this IQueryable<classRoomWebSite.Data.Teacher> queryable, System.String cellPhone)
        {
            // support nulls
            return cellPhone == null 
                ? queryable.Where(t => t.CellPhone == null) 
                : queryable.Where(t => t.CellPhone == cellPhone);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.Teacher.CellPhone"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="cellPhone">CellPhone to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.Teacher> ByCellPhone(this IQueryable<classRoomWebSite.Data.Teacher> queryable, ContainmentOperator containmentOperator, System.String cellPhone)
        {
            if (cellPhone == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("cellPhone", "Parameter 'cellPhone' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(t => t.CellPhone.Contains(cellPhone));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(t => t.CellPhone.StartsWith(cellPhone));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(t => t.CellPhone.EndsWith(cellPhone));
                case ContainmentOperator.NotContains:
                    return queryable.Where(t => t.CellPhone.Contains(cellPhone) == false);
                case ContainmentOperator.NotEquals:
                    return cellPhone == null 
                        ? queryable.Where(t => t.CellPhone != null) 
                        : queryable.Where(t => t.CellPhone != cellPhone);
                default:
                    return cellPhone == null 
                        ? queryable.Where(t => t.CellPhone == null) 
                        : queryable.Where(t => t.CellPhone == cellPhone);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.Teacher.CellPhone"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="cellPhone">CellPhone to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.Teacher> ByCellPhone(this IQueryable<classRoomWebSite.Data.Teacher> queryable, System.String cellPhone, params System.String[] additionalValues)
        {
            var cellPhoneList = new List<System.String> { cellPhone };

            if (additionalValues != null)
                cellPhoneList.AddRange(additionalValues);
            else
                cellPhoneList.Add(null);

            if (cellPhoneList.Count == 1)
                return queryable.ByCellPhone(cellPhoneList[0]);

            return queryable.ByCellPhone(cellPhoneList);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.Teacher.CellPhone"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.Teacher> ByCellPhone(this IQueryable<classRoomWebSite.Data.Teacher> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<classRoomWebSite.Data.Teacher, bool>("CellPhone", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.Teacher.Job"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="job">Job to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.Teacher> ByJob(this IQueryable<classRoomWebSite.Data.Teacher> queryable, System.String job)
        {
            // support nulls
            return job == null 
                ? queryable.Where(t => t.Job == null) 
                : queryable.Where(t => t.Job == job);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.Teacher.Job"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="job">Job to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.Teacher> ByJob(this IQueryable<classRoomWebSite.Data.Teacher> queryable, ContainmentOperator containmentOperator, System.String job)
        {
            if (job == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("job", "Parameter 'job' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(t => t.Job.Contains(job));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(t => t.Job.StartsWith(job));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(t => t.Job.EndsWith(job));
                case ContainmentOperator.NotContains:
                    return queryable.Where(t => t.Job.Contains(job) == false);
                case ContainmentOperator.NotEquals:
                    return job == null 
                        ? queryable.Where(t => t.Job != null) 
                        : queryable.Where(t => t.Job != job);
                default:
                    return job == null 
                        ? queryable.Where(t => t.Job == null) 
                        : queryable.Where(t => t.Job == job);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.Teacher.Job"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="job">Job to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.Teacher> ByJob(this IQueryable<classRoomWebSite.Data.Teacher> queryable, System.String job, params System.String[] additionalValues)
        {
            var jobList = new List<System.String> { job };

            if (additionalValues != null)
                jobList.AddRange(additionalValues);
            else
                jobList.Add(null);

            if (jobList.Count == 1)
                return queryable.ByJob(jobList[0]);

            return queryable.ByJob(jobList);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.Teacher.Job"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.Teacher> ByJob(this IQueryable<classRoomWebSite.Data.Teacher> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<classRoomWebSite.Data.Teacher, bool>("Job", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.Teacher.Ability"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="ability">Ability to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.Teacher> ByAbility(this IQueryable<classRoomWebSite.Data.Teacher> queryable, System.String ability)
        {
            // support nulls
            return ability == null 
                ? queryable.Where(t => t.Ability == null) 
                : queryable.Where(t => t.Ability == ability);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.Teacher.Ability"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="ability">Ability to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.Teacher> ByAbility(this IQueryable<classRoomWebSite.Data.Teacher> queryable, ContainmentOperator containmentOperator, System.String ability)
        {
            if (ability == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("ability", "Parameter 'ability' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(t => t.Ability.Contains(ability));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(t => t.Ability.StartsWith(ability));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(t => t.Ability.EndsWith(ability));
                case ContainmentOperator.NotContains:
                    return queryable.Where(t => t.Ability.Contains(ability) == false);
                case ContainmentOperator.NotEquals:
                    return ability == null 
                        ? queryable.Where(t => t.Ability != null) 
                        : queryable.Where(t => t.Ability != ability);
                default:
                    return ability == null 
                        ? queryable.Where(t => t.Ability == null) 
                        : queryable.Where(t => t.Ability == ability);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.Teacher.Ability"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="ability">Ability to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.Teacher> ByAbility(this IQueryable<classRoomWebSite.Data.Teacher> queryable, System.String ability, params System.String[] additionalValues)
        {
            var abilityList = new List<System.String> { ability };

            if (additionalValues != null)
                abilityList.AddRange(additionalValues);
            else
                abilityList.Add(null);

            if (abilityList.Count == 1)
                return queryable.ByAbility(abilityList[0]);

            return queryable.ByAbility(abilityList);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.Teacher.Ability"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.Teacher> ByAbility(this IQueryable<classRoomWebSite.Data.Teacher> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<classRoomWebSite.Data.Teacher, bool>("Ability", values);
            return queryable.Where(expression);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.Teacher.Educational"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="educational">Educational to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.Teacher> ByEducational(this IQueryable<classRoomWebSite.Data.Teacher> queryable, System.String educational)
        {
            // support nulls
            return educational == null 
                ? queryable.Where(t => t.Educational == null) 
                : queryable.Where(t => t.Educational == educational);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.Teacher.Educational"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="educational">Educational to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.Teacher> ByEducational(this IQueryable<classRoomWebSite.Data.Teacher> queryable, ContainmentOperator containmentOperator, System.String educational)
        {
            if (educational == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("educational", "Parameter 'educational' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(t => t.Educational.Contains(educational));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(t => t.Educational.StartsWith(educational));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(t => t.Educational.EndsWith(educational));
                case ContainmentOperator.NotContains:
                    return queryable.Where(t => t.Educational.Contains(educational) == false);
                case ContainmentOperator.NotEquals:
                    return educational == null 
                        ? queryable.Where(t => t.Educational != null) 
                        : queryable.Where(t => t.Educational != educational);
                default:
                    return educational == null 
                        ? queryable.Where(t => t.Educational == null) 
                        : queryable.Where(t => t.Educational == educational);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.Teacher.Educational"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="educational">Educational to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.Teacher> ByEducational(this IQueryable<classRoomWebSite.Data.Teacher> queryable, System.String educational, params System.String[] additionalValues)
        {
            var educationalList = new List<System.String> { educational };

            if (additionalValues != null)
                educationalList.AddRange(additionalValues);
            else
                educationalList.Add(null);

            if (educationalList.Count == 1)
                return queryable.ByEducational(educationalList[0]);

            return queryable.ByEducational(educationalList);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.Teacher.Educational"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.Teacher> ByEducational(this IQueryable<classRoomWebSite.Data.Teacher> queryable, IEnumerable<System.String> values)
        {
            // creating dynmic expression to support nulls
            var expression = DynamicExpression.BuildExpression<classRoomWebSite.Data.Teacher, bool>("Educational", values);
            return queryable.Where(expression);
        }

        #region Query
        /// <summary>
        /// A private class for lazy loading static compiled queries.
        /// </summary>
        private static partial class Query
        {
            [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
            internal static readonly Func<classRoomWebSite.Data.classRoomWebSiteDataContext, System.Guid, classRoomWebSite.Data.Teacher> GetByKey =
                System.Data.Objects.CompiledQuery.Compile(
                    (classRoomWebSite.Data.classRoomWebSiteDataContext db, System.Guid identification) =>
                        db.Teacher.FirstOrDefault(t => t.Identification == identification));

            [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
            internal static readonly Func<classRoomWebSite.Data.classRoomWebSiteDataContext, System.Guid, classRoomWebSite.Data.Teacher> GetByIdentification =
                System.Data.Objects.CompiledQuery.Compile(
                    (classRoomWebSite.Data.classRoomWebSiteDataContext db, System.Guid identification) =>
                        db.Teacher.FirstOrDefault(t => t.Identification == identification));

        }
        #endregion
    }
}
#pragma warning restore 1591
