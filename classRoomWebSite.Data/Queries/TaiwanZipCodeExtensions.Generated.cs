#pragma warning disable 1591
// <auto-generated>
//     This code was generated from a CodeSmith Generator template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;

namespace classRoomWebSite.Data
{
    /// <summary>
    /// The query extension class for TaiwanZipCode.
    /// </summary>
    public static partial class TaiwanZipCodeExtensions
    {
        /// <summary>
        /// Gets an instance by the primary key.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static classRoomWebSite.Data.TaiwanZipCode GetByKey(this IQueryable<classRoomWebSite.Data.TaiwanZipCode> queryable, System.Int32 identification)
        {
            return queryable.FirstOrDefault(t => t.Identification == identification);
        }
        /// <summary>
        /// Gets an instance by using a unique index.
        /// </summary>
        /// <returns>An instance of the entity or null if not found.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static classRoomWebSite.Data.TaiwanZipCode GetByIdentification(this IQueryable<classRoomWebSite.Data.TaiwanZipCode> queryable, System.Int32 identification)
        {
            var entity = queryable as System.Data.Objects.ObjectSet<classRoomWebSite.Data.TaiwanZipCode>;
            if (entity != null && !entity.Context.ContextOptions.LazyLoadingEnabled)
                return Query.GetByIdentification.Invoke((classRoomWebSite.Data.classRoomWebSiteDataContext)entity.Context, identification);

            return queryable.FirstOrDefault(t => t.Identification == identification);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.TaiwanZipCode.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.TaiwanZipCode> ByIdentification(this IQueryable<classRoomWebSite.Data.TaiwanZipCode> queryable, System.Int32 identification)
        {
            return queryable.Where(t => t.Identification == identification);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.TaiwanZipCode.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.TaiwanZipCode> ByIdentification(this IQueryable<classRoomWebSite.Data.TaiwanZipCode> queryable, ComparisonOperator comparisonOperator, System.Int32 identification)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(t => t.Identification > identification);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(t => t.Identification >= identification);
                case ComparisonOperator.LessThan:
                    return queryable.Where(t => t.Identification < identification);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(t => t.Identification <= identification);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(t => t.Identification != identification);
                default:
                    return queryable.Where(t => t.Identification == identification);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.TaiwanZipCode.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="identification">Identification to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.TaiwanZipCode> ByIdentification(this IQueryable<classRoomWebSite.Data.TaiwanZipCode> queryable, System.Int32 identification, params System.Int32[] additionalValues)
        {
            var identificationList = new List<System.Int32> { identification };

            if (additionalValues != null)
                identificationList.AddRange(additionalValues);

            if (identificationList.Count == 1)
                return queryable.ByIdentification(identificationList[0]);

            return queryable.ByIdentification(identificationList);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.TaiwanZipCode.Identification"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.TaiwanZipCode> ByIdentification(this IQueryable<classRoomWebSite.Data.TaiwanZipCode> queryable, IEnumerable<System.Int32> values)
        {
            return queryable.Where(t => values.Contains(t.Identification));
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.TaiwanZipCode.Zip"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="zip">Zip to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.TaiwanZipCode> ByZip(this IQueryable<classRoomWebSite.Data.TaiwanZipCode> queryable, System.Int32 zip)
        {
            return queryable.Where(t => t.Zip == zip);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.TaiwanZipCode.Zip"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="zip">Zip to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.TaiwanZipCode> ByZip(this IQueryable<classRoomWebSite.Data.TaiwanZipCode> queryable, ComparisonOperator comparisonOperator, System.Int32 zip)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(t => t.Zip > zip);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(t => t.Zip >= zip);
                case ComparisonOperator.LessThan:
                    return queryable.Where(t => t.Zip < zip);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(t => t.Zip <= zip);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(t => t.Zip != zip);
                default:
                    return queryable.Where(t => t.Zip == zip);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.TaiwanZipCode.Zip"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="zip">Zip to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.TaiwanZipCode> ByZip(this IQueryable<classRoomWebSite.Data.TaiwanZipCode> queryable, System.Int32 zip, params System.Int32[] additionalValues)
        {
            var zipList = new List<System.Int32> { zip };

            if (additionalValues != null)
                zipList.AddRange(additionalValues);

            if (zipList.Count == 1)
                return queryable.ByZip(zipList[0]);

            return queryable.ByZip(zipList);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.TaiwanZipCode.Zip"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.TaiwanZipCode> ByZip(this IQueryable<classRoomWebSite.Data.TaiwanZipCode> queryable, IEnumerable<System.Int32> values)
        {
            return queryable.Where(t => values.Contains(t.Zip));
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.TaiwanZipCode.CityName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="cityName">CityName to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.TaiwanZipCode> ByCityName(this IQueryable<classRoomWebSite.Data.TaiwanZipCode> queryable, System.String cityName)
        {
            return queryable.Where(t => t.CityName == cityName);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.TaiwanZipCode.CityName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="cityName">CityName to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.TaiwanZipCode> ByCityName(this IQueryable<classRoomWebSite.Data.TaiwanZipCode> queryable, ContainmentOperator containmentOperator, System.String cityName)
        {
            if (cityName == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("cityName", "Parameter 'cityName' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(t => t.CityName.Contains(cityName));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(t => t.CityName.StartsWith(cityName));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(t => t.CityName.EndsWith(cityName));
                case ContainmentOperator.NotContains:
                    return queryable.Where(t => t.CityName.Contains(cityName) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(t => t.CityName != cityName);
                default:
                    return queryable.Where(t => t.CityName == cityName);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.TaiwanZipCode.CityName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="cityName">CityName to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.TaiwanZipCode> ByCityName(this IQueryable<classRoomWebSite.Data.TaiwanZipCode> queryable, System.String cityName, params System.String[] additionalValues)
        {
            var cityNameList = new List<System.String> { cityName };

            if (additionalValues != null)
                cityNameList.AddRange(additionalValues);

            if (cityNameList.Count == 1)
                return queryable.ByCityName(cityNameList[0]);

            return queryable.ByCityName(cityNameList);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.TaiwanZipCode.CityName"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.TaiwanZipCode> ByCityName(this IQueryable<classRoomWebSite.Data.TaiwanZipCode> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(t => values.Contains(t.CityName));
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.TaiwanZipCode.Town"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="town">Town to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.TaiwanZipCode> ByTown(this IQueryable<classRoomWebSite.Data.TaiwanZipCode> queryable, System.String town)
        {
            return queryable.Where(t => t.Town == town);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.TaiwanZipCode.Town"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="town">Town to search for.</param>
        /// <param name="containmentOperator">The containment operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.TaiwanZipCode> ByTown(this IQueryable<classRoomWebSite.Data.TaiwanZipCode> queryable, ContainmentOperator containmentOperator, System.String town)
        {
            if (town == null && containmentOperator != ContainmentOperator.Equals && containmentOperator != ContainmentOperator.NotEquals)
                throw new ArgumentNullException("town", "Parameter 'town' cannot be null with the specified ContainmentOperator.  Parameter 'containmentOperator' must be ContainmentOperator.Equals or ContainmentOperator.NotEquals to support null.");

            switch (containmentOperator)
            {
                case ContainmentOperator.Contains:
                    return queryable.Where(t => t.Town.Contains(town));
                case ContainmentOperator.StartsWith:
                    return queryable.Where(t => t.Town.StartsWith(town));
                case ContainmentOperator.EndsWith:
                    return queryable.Where(t => t.Town.EndsWith(town));
                case ContainmentOperator.NotContains:
                    return queryable.Where(t => t.Town.Contains(town) == false);
                case ContainmentOperator.NotEquals:
                    return queryable.Where(t => t.Town != town);
                default:
                    return queryable.Where(t => t.Town == town);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.TaiwanZipCode.Town"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="town">Town to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.TaiwanZipCode> ByTown(this IQueryable<classRoomWebSite.Data.TaiwanZipCode> queryable, System.String town, params System.String[] additionalValues)
        {
            var townList = new List<System.String> { town };

            if (additionalValues != null)
                townList.AddRange(additionalValues);

            if (townList.Count == 1)
                return queryable.ByTown(townList[0]);

            return queryable.ByTown(townList);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.TaiwanZipCode.Town"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.TaiwanZipCode> ByTown(this IQueryable<classRoomWebSite.Data.TaiwanZipCode> queryable, IEnumerable<System.String> values)
        {
            return queryable.Where(t => values.Contains(t.Town));
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.TaiwanZipCode.Sequence"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="sequence">Sequence to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.TaiwanZipCode> BySequence(this IQueryable<classRoomWebSite.Data.TaiwanZipCode> queryable, System.Int32 sequence)
        {
            return queryable.Where(t => t.Sequence == sequence);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.TaiwanZipCode.Sequence"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="sequence">Sequence to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.TaiwanZipCode> BySequence(this IQueryable<classRoomWebSite.Data.TaiwanZipCode> queryable, ComparisonOperator comparisonOperator, System.Int32 sequence)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(t => t.Sequence > sequence);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(t => t.Sequence >= sequence);
                case ComparisonOperator.LessThan:
                    return queryable.Where(t => t.Sequence < sequence);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(t => t.Sequence <= sequence);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(t => t.Sequence != sequence);
                default:
                    return queryable.Where(t => t.Sequence == sequence);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.TaiwanZipCode.Sequence"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="sequence">Sequence to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.TaiwanZipCode> BySequence(this IQueryable<classRoomWebSite.Data.TaiwanZipCode> queryable, System.Int32 sequence, params System.Int32[] additionalValues)
        {
            var sequenceList = new List<System.Int32> { sequence };

            if (additionalValues != null)
                sequenceList.AddRange(additionalValues);

            if (sequenceList.Count == 1)
                return queryable.BySequence(sequenceList[0]);

            return queryable.BySequence(sequenceList);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.TaiwanZipCode.Sequence"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.TaiwanZipCode> BySequence(this IQueryable<classRoomWebSite.Data.TaiwanZipCode> queryable, IEnumerable<System.Int32> values)
        {
            return queryable.Where(t => values.Contains(t.Sequence));
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.TaiwanZipCode.CreateDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="createDate">CreateDate to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.TaiwanZipCode> ByCreateDate(this IQueryable<classRoomWebSite.Data.TaiwanZipCode> queryable, System.DateTime createDate)
        {
            return queryable.Where(t => t.CreateDate == createDate);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.TaiwanZipCode.CreateDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="createDate">CreateDate to search for. This is on the right side of the operator.</param>
        /// <param name="comparisonOperator">The comparison operator.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.TaiwanZipCode> ByCreateDate(this IQueryable<classRoomWebSite.Data.TaiwanZipCode> queryable, ComparisonOperator comparisonOperator, System.DateTime createDate)
        {
            switch (comparisonOperator)
            {
                case ComparisonOperator.GreaterThan:
                    return queryable.Where(t => t.CreateDate > createDate);
                case ComparisonOperator.GreaterThanOrEquals:
                    return queryable.Where(t => t.CreateDate >= createDate);
                case ComparisonOperator.LessThan:
                    return queryable.Where(t => t.CreateDate < createDate);
                case ComparisonOperator.LessThanOrEquals:
                    return queryable.Where(t => t.CreateDate <= createDate);
                case ComparisonOperator.NotEquals:
                    return queryable.Where(t => t.CreateDate != createDate);
                default:
                    return queryable.Where(t => t.CreateDate == createDate);
            }
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.TaiwanZipCode.CreateDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="createDate">CreateDate to search for.</param>
        /// <param name="additionalValues">Additional values to search for.</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.TaiwanZipCode> ByCreateDate(this IQueryable<classRoomWebSite.Data.TaiwanZipCode> queryable, System.DateTime createDate, params System.DateTime[] additionalValues)
        {
            var createDateList = new List<System.DateTime> { createDate };

            if (additionalValues != null)
                createDateList.AddRange(additionalValues);

            if (createDateList.Count == 1)
                return queryable.ByCreateDate(createDateList[0]);

            return queryable.ByCreateDate(createDateList);
        }

        /// <summary>
        /// Gets a query for <see cref="classRoomWebSite.Data.TaiwanZipCode.CreateDate"/>.
        /// </summary>
        /// <param name="queryable">Query to append where clause.</param>
        /// <param name="values">The values to search for..</param>
        /// <returns><see cref="IQueryable"/> with additional where clause.</returns>
        [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
        public static IQueryable<classRoomWebSite.Data.TaiwanZipCode> ByCreateDate(this IQueryable<classRoomWebSite.Data.TaiwanZipCode> queryable, IEnumerable<System.DateTime> values)
        {
            return queryable.Where(t => values.Contains(t.CreateDate));
        }

        #region Query
        /// <summary>
        /// A private class for lazy loading static compiled queries.
        /// </summary>
        private static partial class Query
        {
            [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
            internal static readonly Func<classRoomWebSite.Data.classRoomWebSiteDataContext, System.Int32, classRoomWebSite.Data.TaiwanZipCode> GetByKey =
                System.Data.Objects.CompiledQuery.Compile(
                    (classRoomWebSite.Data.classRoomWebSiteDataContext db, System.Int32 identification) =>
                        db.TaiwanZipCode.FirstOrDefault(t => t.Identification == identification));

            [System.CodeDom.Compiler.GeneratedCode("CodeSmith Generator", "6.0.0.0")]
            internal static readonly Func<classRoomWebSite.Data.classRoomWebSiteDataContext, System.Int32, classRoomWebSite.Data.TaiwanZipCode> GetByIdentification =
                System.Data.Objects.CompiledQuery.Compile(
                    (classRoomWebSite.Data.classRoomWebSiteDataContext db, System.Int32 identification) =>
                        db.TaiwanZipCode.FirstOrDefault(t => t.Identification == identification));

        }
        #endregion
    }
}
#pragma warning restore 1591
