#pragma warning disable 1591
// <auto-generated>
//     This code was generated from a CodeSmith Generator template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using CodeSmith.Data.Linq;
using CodeSmith.Data.Linq.Dynamic;
using classRoomWebSite.Data;

namespace classRoomWebSite.Data.Controllers.API
{
    [CodeSmith.Data.Web.Http.PagingAndFiltering]
    public partial class TaiwanZipCodeController : ApiController
    {
        private classRoomWebSite.Data.classRoomWebSiteDataContext _context = new classRoomWebSite.Data.classRoomWebSiteDataContext();

        #region Get

        public classRoomWebSite.Data.TaiwanZipCode GetByKey(System.Int32 identification)
        {
            var taiwanZipCode = _context.TaiwanZipCode.GetByKey(identification);
            if (taiwanZipCode == null)
                throw new HttpResponseException(new HttpResponseMessage(HttpStatusCode.NotFound));

            return taiwanZipCode;
        }

        public IQueryable<classRoomWebSite.Data.TaiwanZipCode> GetAll()
        {
            return _context.TaiwanZipCode.AsQueryable();
        }

        public IQueryable<classRoomWebSite.Data.TaiwanZipCode> GetByZip(System.Int32 zip)
        {
            return _context.TaiwanZipCode.ByZip(zip).AsQueryable();
        }

        public IQueryable<classRoomWebSite.Data.TaiwanZipCode> GetByCityName(System.String cityName)
        {
            return _context.TaiwanZipCode.ByCityName(cityName).AsQueryable();
        }

        public IQueryable<classRoomWebSite.Data.TaiwanZipCode> GetByTown(System.String town)
        {
            return _context.TaiwanZipCode.ByTown(town).AsQueryable();
        }

        public IQueryable<classRoomWebSite.Data.TaiwanZipCode> GetBySequence(System.Int32 sequence)
        {
            return _context.TaiwanZipCode.BySequence(sequence).AsQueryable();
        }

        public IQueryable<classRoomWebSite.Data.TaiwanZipCode> GetByCreateDate(System.DateTime createDate)
        {
            return _context.TaiwanZipCode.ByCreateDate(createDate).AsQueryable();
        }

        #endregion

        public HttpResponseMessage Post(classRoomWebSite.Data.TaiwanZipCode value)
        {
            if (!ModelState.IsValid)
                throw new HttpResponseException(new HttpResponseMessage(HttpStatusCode.BadRequest));

            _context.TaiwanZipCode.AddObject(value);
            _context.SaveChanges();

            var response = Request.CreateResponse<classRoomWebSite.Data.TaiwanZipCode>(HttpStatusCode.Created, value);
            response.Headers.Location = new Uri( Url.Link("DefaultApi", new { Identification = value.Identification }));

            return response;
        }

        public HttpResponseMessage Put(classRoomWebSite.Data.TaiwanZipCode value)
        {
            if (!ModelState.IsValid)
                throw new HttpResponseException(new HttpResponseMessage(HttpStatusCode.BadRequest));

            var taiwanZipCode = _context.TaiwanZipCode.GetByKey(value.Identification);
            if (taiwanZipCode == null)
                throw new HttpResponseException(new HttpResponseMessage(HttpStatusCode.NotFound));

            _context.ApplyCurrentValues(taiwanZipCode.EntityKey.EntitySetName, value);
            _context.SaveChanges();

            return new HttpResponseMessage(HttpStatusCode.OK);
        }

        public HttpResponseMessage Delete(System.Int32 identification)
        {
            var taiwanZipCode = _context.TaiwanZipCode.GetByKey(identification);
            if (taiwanZipCode == null)
                return new HttpResponseMessage(HttpStatusCode.NotFound);

            _context.TaiwanZipCode.DeleteObject(taiwanZipCode);
            _context.SaveChanges();
            
            return new HttpResponseMessage(HttpStatusCode.OK);
        }
    }
}
